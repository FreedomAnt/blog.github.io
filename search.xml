<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 7.0 以上网络安全配置</title>
    <url>/Bug%E8%A7%A3%E5%86%B3/Android/Android-7-0-%E4%BB%A5%E4%B8%8A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>开发中遇到 Android 模拟器跑项目一直请求不到网络链接。Android 版本 9.0 API28</p>
<a id="more"></a>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在 Android 7.0 以上的系统中，Google 引入了一种名为网络安全配置（Network Security Configuration）的功能。<br>全面禁止了非安全的加密，如果要使用非加密的链接，需要配置 network_security_config.xml</p>
<ol>
<li>在 res/xml 下面新建一个 xml 文件，取名为 network_security_config.xml<br>配置如下<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在 res 下面的 AndroidManifest.xml 中的 application 标签中 添加<code>android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</code></li>
</ol>
]]></content>
      <categories>
        <category>Bug解决</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentry部署</title>
    <url>/%E5%BC%80%E5%8F%91/%E9%94%99%E8%AF%AF%E8%BF%BD%E8%B8%AA/Sentry%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Sentry 本身是基于 Django 开发的，而且也依赖到其他的如 Postgresql、 Redis 等数据库，所以一般有两种途径进行安装：通过 Docker 或用 Python 搭建。</p>
<a id="more"></a>

<p>如果你选择了通过 Docker 进行安装，有更加便捷的方式——docker-compose 。在 github 上有一个开源项目用于部署 Sentry，可以直接运行该项目中 <code>./install.sh</code> 将 Sentry 及其依赖都通过 docker 安装。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git clone https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;onpremise.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="启动一个-Redis-容器"><a href="#启动一个-Redis-容器" class="headerlink" title="启动一个 Redis 容器"></a>启动一个 Redis 容器</h2><p>Start a Redis container</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d --name sentry-redis redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="启动一个-Postgres-容器"><a href="#启动一个-Postgres-容器" class="headerlink" title="启动一个 Postgres 容器"></a>启动一个 Postgres 容器</h2><p>Start a Postgres container</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d --name sentry-postgres -e POSTGRES_PASSWORD&#x3D;secret -e POSTGRES_USER&#x3D;sentry postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="生成唯一秘钥"><a href="#生成唯一秘钥" class="headerlink" title="生成唯一秘钥"></a>生成唯一秘钥</h2><p>生成一个密钥，用于后面所有 sentry 容器之间握手。请记住这串密钥，在后面的 docker 命令中，密钥需要以环境变量形式传入</p>
<p>Generate a new secret key to be shared by all <code>sentry</code> containers. This value will then be used as the <code>SENTRY_SECRET_KEY</code> environment variable.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run --rm sentry config generate-secret-key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>密钥为<code>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></p>
<h2 id="连接-Redis、Postgres-和-Sentry"><a href="#连接-Redis、Postgres-和-Sentry" class="headerlink" title="连接 Redis、Postgres 和 Sentry"></a>连接 Redis、Postgres 和 Sentry</h2><p>运行后会自动执行初始化操作.</p>
<p>If this is a new database, you’ll need to run <code>upgrade</code></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -it --rm -e SENTRY_SECRET_KEY&#x3D;&#39;&lt;secret-key&gt;&#39; --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>Note: the <code>-it</code> is important as the initial upgrade will prompt to create an initial user and will fail without it</strong></p>
<blockquote>
<p>此处执行过程中会提示创建账号和密码，如果此处不想创建，等所有步骤执行完成后，再运行命令来创建：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker exec -it my-sentry &#x2F;bin&#x2F;sh &#x3D;&#x3D;&gt; sentry createuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>创建账号密码<span class="exturl" data-url="bWFpbHRvOiYjMTA5OyYjOTc7JiMxMDU7JiMxMDg7JiMxMTA7JiM5NzsmI3g2ZDsmI3g2NTsmIzY0OyYjMTEzOyYjeDcxOyYjNDY7JiM5OTsmIzExMTsmI3g2ZDs=">&#109;&#97;&#105;&#108;&#110;&#97;&#x6d;&#x65;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;<i class="fa fa-external-link-alt"></i></span>/123456</p>
<h2 id="启动-Sentry-Server，同时添加端口映射"><a href="#启动-Sentry-Server，同时添加端口映射" class="headerlink" title="启动 Sentry Server，同时添加端口映射"></a>启动 Sentry Server，同时添加端口映射</h2><p>启动 Sentry Server，同时添加端口映射。Sentry 的端口为 9000，可以使用 <code>-p 9000:9000</code> 参数，再启动后可以通过访问 <code>http://localhost:9000</code> 或 <code>http://host-ip:9000</code> 进入 Sentry 的 web 管理页面</p>
<p>Now start up Sentry server</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d --name my-sentry -p 9000:9000 -e SENTRY_SECRET_KEY&#x3D;&#39;&lt;secret-key&gt;&#39; --link sentry-redis:redis --link sentry-postgres:postgres sentry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="默认配置中需要-Celery"><a href="#默认配置中需要-Celery" class="headerlink" title="默认配置中需要 Celery"></a>默认配置中需要 Celery</h2><p>因此启动一个 Celery 主节点与执行节点（worker 节点可按需多启几个）：</p>
<p>The default config needs a celery beat and celery workers, start as many workers as you need (each with a unique name)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d --name sentry-cron -e SENTRY_SECRET_KEY&#x3D;&#39;&lt;secret-key&gt;&#39; --link sentry-postgres:postgres --link sentry-redis:redis sentry run cron
$ docker run -d --name sentry-worker-1 -e SENTRY_SECRET_KEY&#x3D;&#39;&lt;secret-key&gt;&#39; --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="登录-sentry"><a href="#登录-sentry" class="headerlink" title="登录 sentry"></a>登录 sentry</h2><p>地址:<code>http://127.0.0.1:9000</code>，账号密码是<span class="exturl" data-url="bWFpbHRvOiYjeDZkOyYjOTc7JiMxMDU7JiMxMDg7JiN4NmU7JiM5NzsmI3g2ZDsmIzEwMTsmIzY0OyYjeDcxOyYjMTEzOyYjeDJlOyYjeDYzOyYjeDZmOyYjeDZkOw==">&#x6d;&#97;&#105;&#108;&#x6e;&#97;&#x6d;&#101;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;<i class="fa fa-external-link-alt"></i></span>/123456</p>
<h3 id="配置邮箱告警"><a href="#配置邮箱告警" class="headerlink" title="配置邮箱告警"></a>配置邮箱告警</h3><p><code>$ docker exec -it my-sentry bash</code>进入控制台</p>
<p><code>$ vi /etc/sentry/config.yml</code></p>
<p>腾讯示例：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用</th>
<th>腾讯企业邮</th>
</tr>
</thead>
<tbody><tr>
<td>SENTRY_EMAIL_HOST</td>
<td>SMTP 服务器地址</td>
<td>smtp.exmail.qq.com</td>
</tr>
<tr>
<td>SENTRY_EMAIL_USER</td>
<td>登录的邮箱账号</td>
<td><span class="exturl" data-url="bWFpbHRvOiYjeDY1OyYjMTIwOyYjeDYxOyYjMTA5OyYjeDcwOyYjeDZjOyYjeDY1OyYjNjQ7JiN4NmQ7JiN4NjE7JiMxMDU7JiMxMDg7JiM0NjsmIzk5OyYjeDZmOyYjMTA5Ow==">&#x65;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#64;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>SENTRY_EMAIL_PASSWORD</td>
<td>登录的邮箱密码</td>
<td>password</td>
</tr>
<tr>
<td>SENTRY_EMAIL_PORT</td>
<td>登录的端口</td>
<td>587</td>
</tr>
<tr>
<td>SENTRY_EMAIL_USE_TLS</td>
<td>是否使用 ssl 连接</td>
<td>true</td>
</tr>
<tr>
<td>SENTRY_SERVER_EMAIL</td>
<td>发送的账户，跟 SENTRY_EMAIL_USER 相同</td>
<td><span class="exturl" data-url="bWFpbHRvOiYjeDY1OyYjMTIwOyYjeDYxOyYjeDZkOyYjMTEyOyYjMTA4OyYjMTAxOyYjNjQ7JiMxMDk7JiN4NjE7JiMxMDU7JiMxMDg7JiM0NjsmI3g2MzsmIzExMTsmI3g2ZDs=">&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;<i class="fa fa-external-link-alt"></i></span></td>
</tr>
</tbody></table>
<p>​ 网易邮箱示例：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mail.backend</span><span class="token punctuation">:</span> <span class="token string">"smtp"</span>
<span class="token key atrule">mail.host</span><span class="token punctuation">:</span> <span class="token string">"smtp.126.com"</span>
<span class="token key atrule">mail.port</span><span class="token punctuation">:</span> <span class="token number">25</span>
<span class="token key atrule">mail.username</span><span class="token punctuation">:</span> <span class="token string">"XXXX@126.com"</span>
<span class="token key atrule">mail.password</span><span class="token punctuation">:</span> <span class="token string">"XXXXX"</span>
<span class="token key atrule">mail.use-tls</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">mail.from</span><span class="token punctuation">:</span> <span class="token string">"XXXX@126.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用-vue-继承"><a href="#使用-vue-继承" class="headerlink" title="使用 vue 继承"></a>使用 vue 继承</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Sentry <span class="token keyword">from</span> <span class="token string">"@sentry/browser"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Vue <span class="token keyword">as</span> VueIntegration <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@sentry/integrations"</span><span class="token punctuation">;</span>
Sentry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  dsn<span class="token operator">:</span> <span class="token string">"http://d6168c0c5ba947f0b7fafbb288522b0e@127.0.0.1:9000/2"</span><span class="token punctuation">,</span>
  integrations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VueIntegration</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> Vue<span class="token punctuation">,</span> attachProps<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><ol>
<li><p>传递 Vue 是可选的，如果不传递，则 window.Vue 必须存在。</p>
</li>
<li><p>传递 attachProps 是可选的，默认 true。如果将其设置为 false，Sentry 将禁止发送所有 Vue 组件的道具进行记录。</p>
</li>
<li><p>传递 logErrors 是可选的，默认 false。如果将其设置为 true，Sentry 也将调用原始 Vue 的 logError 函数。</p>
</li>
</ol>
<blockquote>
<p>Vue 错误处理<br>请注意，如果启用此集成，则 Vue 不会在 logError 内部调用它。这意味着在 Vue 渲染器中发生的错误将不会显示在开发人员控制台中。如果要保留此功能，请确保通过该 logErrors: true 选项。</p>
</blockquote>
<ol start="4">
<li>跟踪 Vue 应用程序的最基本配置（仅跟踪顶级组件）如下所示</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Sentry <span class="token keyword">from</span> <span class="token string">"@sentry/browser"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Vue <span class="token keyword">as</span> VueIntegration <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@sentry/integrations"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Integrations <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@sentry/tracing"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
Sentry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  integrations<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">Integrations<span class="token punctuation">.</span>BrowserTracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">VueIntegration</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      Vue<span class="token punctuation">,</span>
      tracing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  tracesSampleRate<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token comment">// Be sure to lower this in production</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要跟踪子组件，并查看有关渲染过程的更多详细信息，请配置集成以跟踪所有子组件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">VueIntegration</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  Vue<span class="token punctuation">,</span>
  tracing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  tracingOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    trackComponents<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="启用-sourceMap-以方便定位-bug"><a href="#启用-sourceMap-以方便定位-bug" class="headerlink" title="启用 sourceMap 以方便定位 bug"></a>启用 sourceMap 以方便定位 bug</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ npm install --save-dev @sentry&#x2F;webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> SentryWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@sentry/webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// other configuration</span>
  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">SentryWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// sentry-cli configuration</span>
        authToken<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_AUTH_TOKEN</span><span class="token punctuation">,</span>
        org<span class="token operator">:</span> <span class="token string">"exmaple-org"</span><span class="token punctuation">,</span>
        project<span class="token operator">:</span> <span class="token string">"example-project"</span><span class="token punctuation">,</span>

        <span class="token comment">// webpack specific configuration</span>
        include<span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>
        ignore<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token string">"webpack.config.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>In Vue 2.x, you should use vue.config.js instead of webpack.config.js, and use include: “./dist” instead of include: “.”</p>
</blockquote>
<p>也可以通过配置文件的方式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">plugins<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"development"</span>
  <span class="token operator">?</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">SentryWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        release<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 唯一标识，可以用其他的比如 hash</span>
        <span class="token comment">// webpack specific configuration</span>
        include<span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>
        ignore<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token string">"vue.config.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        configFile<span class="token operator">:</span> <span class="token string">".sentryclirc"</span><span class="token punctuation">,</span> <span class="token comment">// 默认同级，如果不一样需要用node path模块处理一下</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>.sentryclirc</code>配置文件如下：<br><code>token</code>生成: 登陆 sentry 控制台页面，点击左上角头像，再点击<code>API keys-&gt;授权令牌</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>defaults<span class="token punctuation">]</span>
<span class="token comment">### 你的域名</span>
url='http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>9000'
<span class="token comment">### 组织团队名默认是 sentry</span>
org=sentry
<span class="token comment">### 项目名称</span>
project=vue
<span class="token comment">### 步骤1创建的</span>
<span class="token punctuation">[</span>auth<span class="token punctuation">]</span>
token=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>提示：docker 生成版本较低，建议 github 上下载或者直接用线上的 Saas 做。</strong></p>
]]></content>
      <categories>
        <category>开发</category>
        <category>错误追踪</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>sentry</tag>
      </tags>
  </entry>
  <entry>
    <title>docker+gitlab-ci+ssh+gitlab-pages实现代码自动构建部署</title>
    <url>/%E5%BC%80%E5%8F%91/Devops/docker-gitlab-ci-ssh-pages%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="主要操作步骤"><a href="#主要操作步骤" class="headerlink" title="主要操作步骤"></a>主要操作步骤</h2><ol>
<li><strong>使用 ssh-keygen 在本地创建新的 SSH 密钥对。</strong></li>
<li><strong>将私钥作为变量添加到您的项目中。</strong></li>
<li><strong>运行 ssh-agent 以加载私钥。</strong></li>
<li><strong>将公共密钥复制到您想要访问的服务器上（通常在 <code>~/.ssh/authorized_keys</code>中），或者在访问私有 GitLab 存储库时将其添加为部署密钥。</strong></li>
</ol>
<a id="more"></a>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于 docker 启动的 centos 不能使用 systemctl，包括安装 server 命令都不行，网上有解决方法如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -itd -p 10022:22 --name centos8 --privileged&#x3D;true centos &#x2F;sbin&#x2F;init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但不适合于 docker 的 windows 版本，所以这里安装 centos7 以下的版本，不使用 systemctl。</p>
<h3 id="下载-centos6-10-并进入控制台"><a href="#下载-centos6-10-并进入控制台" class="headerlink" title="下载 centos6.10 并进入控制台"></a>下载 centos6.10 并进入控制台</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -itd -p 10022:22 --name centos6 centos:6.10 bash
docker exec -it centos6 bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里直接 run 一个 container 。如果 run 之前没有 pull centos6 的话，在 run 的时候 docker 会自动去找相应的 image 去拉取，把 22 端口映射到宿主机的 10022 端口，方便 ssh。</p>
<h3 id="安装-openssh-server"><a href="#安装-openssh-server" class="headerlink" title="安装 openssh-server"></a>安装 openssh-server</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rpm -qa | grep ssh
$ yum update -y &amp;&amp; yum install openssh-server -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="设置-ssh-允许-root-登陆"><a href="#设置-ssh-允许-root-登陆" class="headerlink" title="设置 ssh 允许 root 登陆"></a>设置 ssh 允许 root 登陆</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>PermitRootLogin 修改为 yes。</p>
<h3 id="开启-ssh-服务"><a href="#开启-ssh-服务" class="headerlink" title="开启 ssh 服务"></a>开启 ssh 服务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ &#x2F;etc&#x2F;init.d&#x2F;sshd start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看 ssh 是否已经启动</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ps -ef|grep ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="安装-rsync"><a href="#安装-rsync" class="headerlink" title="安装 rsync"></a>安装 rsync</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install rsync -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>如果用 scp 传的话本地和远程都需要安装 openssh-client，如果用 rsync 传的话本地和远程都需要安装 rsync。</strong></p>
<h3 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里设置为 123456，方便登陆验证。</p>
<h2 id="配置-gitlab-runner"><a href="#配置-gitlab-runner" class="headerlink" title="配置 gitlab-runner"></a>配置 gitlab-runner</h2><h3 id="下载-gitlab-runner-并进入控制台"><a href="#下载-gitlab-runner-并进入控制台" class="headerlink" title="下载 gitlab-runner 并进入控制台"></a>下载 gitlab-runner 并进入控制台</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d --name gitlab-runner -v d:&#x2F;docker&#x2F;gitlab-runner&#x2F;config:&#x2F;etc&#x2F;gitlab-runner gitlab&#x2F;gitlab-runner:latest
$ docker exec -it gitlab-runner bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="注册-gitlab-runner"><a href="#注册-gitlab-runner" class="headerlink" title="注册 gitlab-runner"></a>注册 gitlab-runner</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ gitlab-runner register<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里注意填写下 tags，后面方便用到。执行环境选择的 shell，如果执行环境选 docker 的话，相应的版本可以选 alpine:latest。<br>试过 docker，因为没有映射<code>/var/run/docker.sock</code>，用 docker 执行 jobs 有时候会报错。所以这里我改成了 shell。</p>
<h2 id="配置-CI-CD"><a href="#配置-CI-CD" class="headerlink" title="配置 CI/CD"></a>配置 CI/CD</h2><h3 id="在本机生成密钥对"><a href="#在本机生成密钥对" class="headerlink" title="在本机生成密钥对"></a>在本机生成密钥对</h3><p>在 runner 机器上生成密钥</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-keygen -t rsa -f runnerkey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里文件名称最好修改一下，避免生成的密钥文件将原来的覆盖掉。密钥的类型官方推荐是 ed25519，即</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-keygen -t ed25519 -f runnerkey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是 centos6.10 不支持 ed25519，这里还是换成 rsa。</p>
<h3 id="公钥放到要部署的服务器"><a href="#公钥放到要部署的服务器" class="headerlink" title="公钥放到要部署的服务器"></a>公钥放到要部署的服务器</h3><p>公钥放到要部署的服务器的<code>~/.ssh/authorized_keys</code>文件里</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-copy-id -i runnerkey.pub root@remoteip -p port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>按照提示输入密码就行了。</p>
<h3 id="私钥配置到-gitlab-变量"><a href="#私钥配置到-gitlab-变量" class="headerlink" title="私钥配置到 gitlab 变量"></a>私钥配置到 gitlab 变量</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat runnerkey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里可以把服务器地址、端口都配置上，路径为 gitlab 页面上项目里的<code>Setting =&gt; CI/CD =&gt; Variables =&gt; Add Variables</code>，key 就用<code>SSH_PRIVATE_KEY</code>和<code>SSH_KNOWN_HOSTS</code>、<code>SSH_KNOWN_HOSTS_PORT</code>。</p>
<h3 id="用-root-登陆-runner-服务器"><a href="#用-root-登陆-runner-服务器" class="headerlink" title="用 root 登陆 runner 服务器"></a>用 root 登陆 runner 服务器</h3><p>用 root 登陆 runner 服务器并设置为可无密码切换到 root。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ apt-get install sudo -y
$ apt-get install vim -y
$ vim &#x2F;etc&#x2F;sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>添加以下命令</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ gitlab-runner ALL&#x3D;(ALL) NOPASSWD: ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="编写-gitlab-ci-yml"><a href="#编写-gitlab-ci-yml" class="headerlink" title="编写 gitlab-ci.yml"></a>编写 gitlab-ci.yml</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">stages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> deploy
<span class="token key atrule">deploy_by_192</span><span class="token punctuation">:</span>
  stage<span class="token punctuation">:</span> deploy
  before_script<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'command -v ssh-agent || ( sudo apt-get update -y &amp;&amp; sudo apt-get install openssh-client -y )'</span>
    <span class="token punctuation">-</span> eval $(ssh<span class="token punctuation">-</span>agent <span class="token punctuation">-</span>s)
    <span class="token punctuation">-</span> echo "$SSH_PRIVATE_KEY" <span class="token punctuation">|</span> tr <span class="token punctuation">-</span>d '\r' <span class="token punctuation">|</span> ssh<span class="token punctuation">-</span>add <span class="token punctuation">-</span>
    <span class="token punctuation">-</span> mkdir <span class="token punctuation">-</span>p ~/.ssh
    <span class="token punctuation">-</span> chmod 700 ~/.ssh
    <span class="token comment"># - '[[ -f /.dockerenv ]] &amp;&amp; echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config'</span>
    <span class="token punctuation">-</span> ssh<span class="token punctuation">-</span>keyscan <span class="token punctuation">-</span>p "$SSH_KNOWN_HOSTS_PORT" "$SSH_KNOWN_HOSTS" <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/known_hosts
    <span class="token punctuation">-</span> chmod 644 ~/.ssh/known_hosts
    <span class="token punctuation">-</span> command <span class="token punctuation">-</span>v rsync <span class="token punctuation">|</span><span class="token punctuation">|</span> ( sudo apt<span class="token punctuation">-</span>get install rsync <span class="token punctuation">-</span>y )
  script<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> rsync <span class="token punctuation">-</span>avze "ssh <span class="token punctuation">-</span>p $SSH_KNOWN_HOSTS_PORT" ./dist root@$SSH_KNOWN_HOSTS<span class="token punctuation">:</span>/home/
  only<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master
  tags<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> testci<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里如果是用的 docker, 可以将上面文件中的部分代码</p>
<pre class="line-numbers language-none"><code class="language-none">- ssh-keyscan -p &quot;$SSH_KNOWN_HOSTS_PORT&quot; &quot;$SSH_KNOWN_HOSTS&quot; &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts
- chmod 644 ~&#x2F;.ssh&#x2F;known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>替换为</p>
<pre class="line-numbers language-none"><code class="language-none">-&#39;[[ -f &#x2F;.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt;&gt; ~&#x2F;.ssh&#x2F;config&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="脚本解释"><a href="#脚本解释" class="headerlink" title="脚本解释"></a>脚本解释</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p><code>eval $(ssh-agent -s)</code></p>
<p>解释如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-agent
SSH_AUTH_SOCK&#x3D;&#x2F;tmp&#x2F;ssh-GiORRAqMXEFt&#x2F;agent.28161; export SSH_AUTH_SOCK;
SSH_AGENT_PID&#x3D;28162; export SSH_AGENT_PID;
echo Agent pid 28162;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出结果中明确说明了导出了几个环境变量，<strong>上面的 ssh-agent 尽管运行成功了，但是那两个环境变量并没有导出。所以更多时候，会使用 eval 来执行 ssh-agent，使得这些环境变量也被导出。</strong><br>如下两种方式均可启动 ssh-gent。</p>
<p>方式一：创建子 shell，在子 shell 中运行 ssh-agent 进程，退出子 shell 自动结束代理。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-agent $SHELL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>方式二：单独启动一个代理进程，退出当前 shell 时最好使用 <code>ssh-agent -k</code> 关闭对应代理</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ eval &#96;ssh-agent&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>参数说明：<br>-s 生成 Bourne shell 风格的命令输出</strong></p>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p><code>echo &quot;$SSH_PRIVATE_KEY&quot; | tr -d &#39;\r&#39; | ssh-add -</code></p>
<p>解释如下：<br>删除私钥字符串的空格（针对 ed25519 的一个 bug），然后作为输入传给 ssh-add 添加到 ssh-agent 代理中<br><strong>参数说明：<br>“tr”:用于转换或删除文件中的字符。<br>“-d”:–delete 删除指令字符。<br>“-“:指令会从标准输入设备读取数据。</strong></p>
<h3 id="ssh-keyscan"><a href="#ssh-keyscan" class="headerlink" title="ssh-keyscan"></a>ssh-keyscan</h3><p><code>ssh-keyscan -p &quot;$SSH_KNOWN_HOSTS_PORT&quot; &quot;$SSH_KNOWN_HOSTS&quot; &gt;&gt; ~/.ssh/known_hosts</code></p>
<p>解释如下：<br>将远程机器的公钥添加到 runner 机器的 known_hosts 中，目录在<code>/home/gitlab-runner/.ssh/known_hosts</code>。<br>ssh-keyscan 的主要用途是用于批量获取机器的公钥，这样以后再用 ssh 登录到已经获取过公钥的服务器时，不需要再输入 yes 之类去保存公钥了。<br><strong>参数说明：<br>“-p”，端口。</strong></p>
<h3 id="f-amp-amp-echo"><a href="#f-amp-amp-echo" class="headerlink" title="-f &amp;&amp; echo"></a>-f &amp;&amp; echo</h3><p><code>&#39;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt;&gt; ~/.ssh/config&#39;</code></p>
<p>解释如下：<br>如果存在 <code>/.dockerenv</code> 且为常规文件，则添加以下字符串到<code>~/.ssh/config</code> 文件，实现当第一次连接服务器时，自动接受新的公钥，不必询问。<br>但这里会一直往<code>~/.ssh/config</code> 里面写数据，并不是覆盖原有的数据，方式不太好</p>
<pre class="line-numbers language-none"><code class="language-none">Host *
  StrictHostKeyChecking no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果服务器（系统重装，服务器间 IP 地址交换，DHCP，虚拟机重建，中间人劫持等），由于新连接服务器都需要进行公钥确认，可配置<code>StrictHostKeyChecking=no</code>绕过公钥检查<br>也可以用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-keygen -l -f ~&#x2F;.ssh&#x2F;known_hosts
$ ssh-keygen -R 服务器端的ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>来删除旧的地址</p>
<p><strong>参数说明：<br>“[[]]”：这里相当于 test。<br>“-f”：如果 file 存在且是一个普通文件则为真。<br>“echo -e”：处理特殊字符，开启转义。</strong></p>
<p><strong>如果配置了 ssh 一次都没有登陆过的话，第一次登陆是需要绕过公钥检查，也可以用 <code>ssh -o stricthostkeychecking=no</code> 来绕过。<br>用命令 <code>cat /etc/issue</code> 可以查看 linux 版本</strong></p>
<p>执行之前最好到 gitlab 的 pipelines 用 CI Lint 验证下 gitlab-ci.yml 的格式是否正确，如果不正确是不触发 jobs 的。<br>到 gitlab 上该项目查看，jobs 执行成功 passed，到这里就大功告成。</p>
<p>如果当前 runner 和需要部署的机器是一台的话可以直接用 cp 拷贝了。<br>可以用 <code>echo whoami</code> 和<code>echo pwd</code>查看当前用户和路径的。可以看到当前用户为 gitlab-runner，路径为<code>/home/gitlab-runner/builds/qmPHwZRG/0/userNameXXX/gitdirXXXX</code>，拷贝之前先执行</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ chown -R gitlab-runner:gitlab-runner .&#x2F;share<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行的时候前面添加 sudo，例如</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;share&#x2F;html
$ sudo cp -r .&#x2F;dist&#x2F; &#x2F;usr&#x2F;local&#x2F;share&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>就可以实现直接拷贝</p>
<p><strong>即执行 gitlab-ci.yml 是用户 gitlab-runner 在 runner 注册的服务器上执行的。如果要部署在 runner 服务器，就直接 cp 拷贝，如果要部署到其他服务器，就设置 ssh 无密码登录再 rsync 或者 scp 都可以</strong></p>
<h2 id="gitlab-pages"><a href="#gitlab-pages" class="headerlink" title="gitlab pages"></a>gitlab pages</h2><p>gitlab pages 是 gitlab 的静态托管页面，只需要在 gitlab-ci.yml 重设置 pages 即可，只要采用了 public 文件夹，在提交的时候会默认把 public 里面的文件部署到 pages 作为静态页面。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pages</span><span class="token punctuation">:</span>
  stage<span class="token punctuation">:</span> deploy
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> mkdir .public
    <span class="token punctuation">-</span> cp <span class="token punctuation">-</span>r ./<span class="token important">*.html</span> .public
    <span class="token punctuation">-</span> mv .public public
  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span>
    paths<span class="token punctuation">:</span>
      <span class="token punctuation">-</span> public
  <span class="token key atrule">when</span><span class="token punctuation">:</span> manual
  only<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master
  tags<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> testci<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里设置了手动触发。<u><strong>特别需要注意的一点是顶层的 stages 名称，必须是 pages</strong></u>，不然 gitlab 的 pages 部署不会显示 pages 的地址。部署好了之后在 gitlab 中的 <code>Settings =&gt; Pages</code> 就可以看到部署的地址了，如果需要设置所有人可见的话，在单个项目的设置<code>Settings =&gt; General =&gt; Visibility</code>。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>gitlab</tag>
        <tag>gitlab-ci</tag>
        <tag>gitlab-pages</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Android上canvas不显示</title>
    <url>/Bug%E8%A7%A3%E5%86%B3/Android/Android%E4%B8%8Acanvas%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>这次遇到的问题是 echarts 的图形在 android 模拟器中不显示，Android 版本 9.0 API28</p>
<a id="more"></a>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>Android 在 API14 以上默认启用硬件加速，如果启用硬件加速导致了视图的绘制，Android 允许您在多个级别选择是启用还是停用硬件加速。详见<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL2dyYXBoaWNzL2hhcmR3YXJlLWFjY2VsP2hsPXpoLWNuI2NvbnRyb2xsaW5n">控制硬件加速<i class="fa fa-external-link-alt"></i></span><br>可以从以下四个级别控制硬件加速</p>
<ul>
<li>应用 Application<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name"><span class="token namespace">android:</span>hardwareAccelerated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">...</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>Activity<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>hardwareAccelerated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>窗口 Window<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>
      <span class="token class-name">WindowManager</span><span class="token punctuation">.</span><span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>FLAG_HARDWARE_ACCELERATED<span class="token punctuation">,</span>
      <span class="token class-name">WindowManager</span><span class="token punctuation">.</span><span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>FLAG_HARDWARE_ACCELERATED<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>视图 View<pre class="line-numbers language-java" data-language="java"><code class="language-java">myView<span class="token punctuation">.</span><span class="token function">setLayerType</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">.</span>LAYER_TYPE_SOFTWARE<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<p>在这四个层次中，应用和 Activity 是可以选择打开或者关闭加速的，窗口只能打开加速，视图层只能关闭加速。<br>关闭硬件加速后，canvas 可以显示。</p>
]]></content>
      <categories>
        <category>Bug解决</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>docker+gitlab+jenkins+ssh实现代码自动构建部署</title>
    <url>/%E5%BC%80%E5%8F%91/Devops/docker-gitlab-jenkins-ssh%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="安装-gitlab"><a href="#安装-gitlab" class="headerlink" title="安装 gitlab"></a>安装 gitlab</h2><p>这里我是 docker 安装的，由于电脑板载内存只有 8g，gitlab 的 docker 镜像 gitlab/gitlab-ce 安装启动之后运行一会儿磁盘就拉满，于是换了一个汉化的社区版，都可以实现自动构建部署。<br>首先，docker 安装 gitlab,这里 gitlab 端口映射为 10080</p>
<a id="more"></a>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p 10080:80 --name gitlab twang2218&#x2F;gitlab-ce-zh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果是本机 windows 想要尝试社区镜像的，可以使用下面的代码</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker volume create gitlab-logs
$ docker volume create gitlab-data
$ docker run -d -p 10443:443 -p 10080:80 -p 10822:22 --name gitlab -v d:&#x2F;docker&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab -v gitlab-logs:&#x2F;var&#x2F;log&#x2F;gitlab -v gitlab-data:&#x2F;var&#x2F;opt&#x2F;gitlab gitlab&#x2F;gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果是 linux 的话要尝试社区镜像网上就很多了。<br>需要注意下 <strong>gitlab 的 webhook 配置的钩子地址是不允许内网的，比如 192.168、172.16 或者 10 开头的，这时候需要用 gitlab 的管理员账号（root）登陆去修改允许 webhook 的本地请求</strong>。<br>用 root 账号登陆之后左上角有一个小扳手的图标<code>Admin area =&gt; Settings =&gt; Network</code>勾选允许本地网络的请求即可。<br>这里就涉及到管理员账号的密码，网上很多参考说是系统默认的用户名：<code>root</code>，密码：<code>5iveL!fe</code>，试过了没有用，就只能自己去修改。这里可以参考官方<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vZWUvc2VjdXJpdHkvcmVzZXRfcm9vdF9wYXNzd29yZC5odG1sI2hvdy10by1yZXNldC15b3VyLXJvb3QtcGFzc3dvcmQ=">How to reset your root password<i class="fa fa-external-link-alt"></i></span><br>这里有坑的是安装社区版 gitlab/gitlab-ce 查不到用户。<br>进入 tty</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker exec -it gitlab bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>正常的修改密码代码如下：</p>
<pre class="line-numbers language-none"><code class="language-none">gitlab-rails console -e production
user &#x3D; User.where(id: 1).first或者user &#x3D; User.find_by(email: &#39;admin@example.com&#39;)
user.password &#x3D; 12345678
user.password_confirmation &#x3D; 12345678
user.save!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里查询到的<code>User.where(id: 1).first</code>为 nil，就是 none 的意思，这里不知道怎么解决。还好汉化的那个版本可以直接设置 root 密码。<br>到这一步 gitlab 就可以使用了，但是 clone 的地址没有设置，clone 的地址目前是显示为一串字母。这里需要在<br><code>vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</code>修改为需要暴露的 ip 和端口<br>然后<code>gitlab-ctl restart</code>重启 gitlab 即可。</p>
<h2 id="安装-jenkins"><a href="#安装-jenkins" class="headerlink" title="安装 jenkins"></a>安装 jenkins</h2><p>安装 jenkins 就简便许多，端口映射到 18080，这里 jenkins 的配置文件后面都在<code>/var/jenkins_home/</code>这个文件夹下</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p 18080:8080 -p 50000:50000 --name jenkins -v d:&#x2F;docker&#x2F;jenkins:&#x2F;var&#x2F;jenkins_home jenkins&#x2F;jenkins:lts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>后面由于涉及到 maven 环境的安装，所以进入 bash 环境的时候可以指定账号</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker exec -it -u 0 jenkins bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里-u 可以指定 username 或者 uid，也可以写成</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker exec -it -u root jenkins bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>打开网页，需要输入首次的密码，可以在<code>/var/jenkins_home/secrets/initialAdminPassword</code>找到。<br>进入之后可以选择配置插件，也可以跳过后面再来配置。这里选择的跳过。<br><strong>如果退出之后不知道管理员的密码</strong>，可以打开<code>/var/jenkins_home/users/adminXXX</code>里面的 config.xml，找到 passwordHash，设置为<code>#jbcrypt:$2a$10$MiIVR0rr/UhQBqT.bBq0QehTiQVqgNpUGyWW2nJObaVAM/2xSQdSq</code><br>这个是编码过后的 123456，这样你的管理员账号就设置为了 123456.</p>
<h2 id="安装-jenkins-插件"><a href="#安装-jenkins-插件" class="headerlink" title="安装 jenkins 插件"></a>安装 jenkins 插件</h2><p>安装插件这里由于官方的仓库比较慢而且经常失败，这里可以换其他源，这里可以选择清华大学的<code> https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.60/update-center.json</code><br>这里有个坑是清华是把这个文件镜像过来了，但是没有把里面的插件升级地址改成清华，所以下载还是有问题，这里解决方式有两种</p>
<h3 id="nginx-代理"><a href="#nginx-代理" class="headerlink" title="nginx 代理"></a>nginx 代理</h3><p>将所有<code>http://updates.jenkins-ci.org/download</code>代理到<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins</code> 。</p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开<code>/var/jenkins_home/updates/default.json</code>，将所有的<code>http://updates.jenkins-ci.org/download</code>,有的是<code>https://updates.jenkins.io/download</code>批量修改为<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins</code>，一劳永逸。</p>
<p>这里添加几个常用的插件<strong>Maven Integration</strong>、<strong>GitLab</strong>、<strong>GitLab Hook</strong>、<strong>Publish Over SSH</strong></p>
<h2 id="jenkins-配置"><a href="#jenkins-配置" class="headerlink" title="jenkins 配置"></a>jenkins 配置</h2><p>配置之前先添加两个凭据。</p>
<ol>
<li>用于 gitlab 的 accessToken<br>首先登陆 gitlab<code>用户 =&gt; 设置 =&gt; accessToken</code>，填写名称和过期时间，勾选 api，点击生成 accessToken，这里要记录下 token，如果刷新了 token 就没了。<br>登陆到 jenkins，<code>Manage Jenkins =&gt; Manage Credentials</code>点击全局凭证，<code>Add Credentials</code>选择<code>Gitlab API token</code>，填写 accessToken。</li>
<li>用于 gitlab 的登陆账号和密码<br>还是在全局凭证，点击添加凭证，类型选择<code>Username with password</code>，填写用户拉取代码的 gitlab 账号和用户名</li>
</ol>
<p>添加完成之后配置 gitlab 的连接地址和需要 ssh 部署的地址。<br>点击<code>Manage Jenkins =&gt; Configure System</code>里面的 gitlab 配置，填写你的 gitlab 名称 <code>Connection name</code>，gitlab 地址，我这里是<code>http://192.168.7.104:10080</code>，名称为”jenkins_for_gitlab”，凭证选择刚才新建的第一个凭证<code>Gitlab API token</code>，添加完成之后点击<code>Test Connection</code>测试，如果配置正确提示 Success。<br>然后添加 ssh 配置 <code>Publish over SSH</code>，<code>SSH Servers</code> 填写 ssh 的地址，账号，以及远程位置，这里可以直接设置为想要部署的位置，我这里设置为根目录<code>/</code>。<br>高级里面填写端口、密码，之后测试<code>Test Configuration</code>，之后 save 保存。</p>
<h2 id="配置全局-jdk-和-maven"><a href="#配置全局-jdk-和-maven" class="headerlink" title="配置全局 jdk 和 maven"></a>配置全局 jdk 和 maven</h2><p>这一步需要安装 jenkins 的机器安装 jdk 和 maven。<br>一般安装 jenkins 的时候已经安装了 jdk，这里还需要安装 maven。<br>这里下载了压缩包到<code>/usr/local/</code>下面然后 unzip 解压，文件夹是 apache-maven-3.6.3。<br>需要修改环境变量，先下载一个 vim。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ apt-get update -y
$ apt-get install vim -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里我 jdk 的文件名为 openjdk-8。<br>maven 和 jdk 都放在了<code>/usr/local</code> 下面。<br>安装完成后编辑环境变量<code>vi /etc/profile</code>，在文件末尾添加</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">MAVEN_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/apache-maven-3.6.3</span>
<span class="token attr-name">JAVA_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/openjdk-8</span>
<span class="token attr-name">CLASS_PATH</span><span class="token punctuation">=</span><span class="token attr-value">$JAVA_HOME/lib/</span>
<span class="token attr-name">PATH</span><span class="token punctuation">=</span><span class="token attr-value">$PATH:$MAVEN_HOME/bin:$JAVA_HOME/bin</span>
<span class="token attr-name">export</span> <span class="token attr-value">PATH MAVEN_HOME JAVA_HOME CLASS_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置完成之后输入<code>source /etc/profile</code>使配置文件生效。到这里可以测试下安装是否成功</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mvn -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>点击<code>Manage Jenkins =&gt; Global Tool Configuration</code>。<br>选择 <code>JDK installations</code>，填写 jdk 名称和路径<code>/usr/local/openjdk-8</code>。<br>选择 Maven installations，填写 maven 的名称和路径<code>/usr/local/apache-maven-3.6.3</code>，然后 save 保存。</p>
<h2 id="通过-SSH-部署到远程服务器"><a href="#通过-SSH-部署到远程服务器" class="headerlink" title="通过 SSH 部署到远程服务器"></a>通过 SSH 部署到远程服务器</h2><h3 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h3><p>到 jenkins 主界面，左侧导航栏选择 <code>New Item</code>,填写名称，选择 <code>Freestyle project</code>，在配置 <code>configure</code> 里面，</p>
<ul>
<li><p><code>General</code>—在 <code>Gitlab Connection</code> 选择在配置里面设置的 gitlab 的连接”jenkins for gitlab”。</p>
</li>
<li><p><code>Source Code Management</code>—选择 git，仓库地址填写需要部署的项目的仓库地址，凭证选择建立好的 gitlab 的登陆账号密码，分支这里测试是直接选的 master 分支，</p>
</li>
<li><p><code>Build Triggers</code>—勾选<code>Build when a change is pushed to GitLab. GitLab webhook URL: http://192.168.7.104:18080/project/testDist</code>，这里需要记录下这个 webhook 地址，填写到 gitlab 的时候需要。<br>点击高级选项，点击 Generate 生成 <code>Secret token</code>，这里我们记录下这个 token，<code>b3d5a618874a8335XXXXXXXXX</code></p>
</li>
<li><p><code>Build Environment</code>—这里可以配置在 build 之前或者 build 之后的操作，比如我们需要 build 之后将生成的<code>/dist</code> 文件夹通过 SSH 部署到远程服务器。<br><code>SSH Server</code> 选择配置的地址.<br><code>Source files</code> 填写<code>dist/</code>即为 dist 下面所有文件.<br><code>Remote directory</code> 填写<code>home/</code><br>意思是将 jenkins 下面 workspace 的文件拷贝到远程服务器的 home 文件夹下，其中 <code>Exec command</code> 还可以填写需要在远程服务器执行的操作，比如 tomcat 的关闭与启动等等。</p>
</li>
</ul>
<h3 id="后端-jar-包部署"><a href="#后端-jar-包部署" class="headerlink" title="后端 jar 包部署"></a>后端 jar 包部署</h3><p>jar 包部署与前端部署一样，在 <code>Build Environment</code> 中 <code>Source files</code> 填写<code>target/*.jar</code>。<br><code>Remove prefix</code> 删除前缀这里填写<code>target</code>。<br><code>Remote directory</code> 填写需要部署打的 jar 包位置。<br>这里 build 可以设置打包命令为<code>mvn clear package</code>。<br><code>nohup java -jar XXXX.jar &amp;</code>启动 jar 包，也可以写一些执行脚本在服务器上运行。</p>
<h2 id="配置-gitlab-执行自动触发构建部署"><a href="#配置-gitlab-执行自动触发构建部署" class="headerlink" title="配置 gitlab 执行自动触发构建部署"></a>配置 gitlab 执行自动触发构建部署</h2><p>进入 gitlab 选择需要部署的项目，<code>设置 =&gt; 集成</code>里面填写 webhook，链接填写为 jenkins 里面生成的链接，如<code>http://192.168.7.104:18080/project/testDist</code>，安全令牌填写<code>b3d5a618874a83358bc0aXXXXX</code>。<br>选择 push 触发，分支选择 master，这样 master 分支提交 push 的时候就会触发这个 webhook，保存之后可以 test 测试<code>Push events</code>，如果成功则提示<code> Hook executed successfully: HTTP 200</code>，如果提示<code> Requests to localhost are not allowed</code>，就需要登陆管理员账号开启内网请求权限，参照文章第一点<a href="#%E5%AE%89%E8%A3%85-gitlab">安装-gitlab</a></p>
<h2 id="查看任务的-log"><a href="#查看任务的-log" class="headerlink" title="查看任务的 log"></a>查看任务的 log</h2><p>进入任务，左侧导航<code>Console Output</code>可查询 jenkins 日志。<br><strong>build 生成的文件可在 <code>/var/jenkins_home/workspace</code> 下面查看</strong></p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>gitlab</tag>
        <tag>ssh</tag>
        <tag>devops</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github-pages搭建个人博客</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>近日使用 hexo 搭建了个人的博客，搭建好之后写一篇文章记录下过程。<br>hexo 是可以直接生成静态文件，拿静态页面部署，用 github 部署不需要备案，比较方便，唯一的缺点就是访问有点慢。</p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>需要先安装好 nodejs、git，注册登录 github，熟悉一些 markdown 语法等暂且不表。</p>
<h2 id="github-新建仓库"><a href="#github-新建仓库" class="headerlink" title="github 新建仓库"></a>github 新建仓库</h2><p>github 上新建一个仓库，名字为 <code>username.git.io</code>，仓库需要配置为 public。这里的 username 就是你 github 的名字，比如 github 用户名是 FreedomAnt，仓库就取名为 <code>freedomant.github.io</code>。<br>这样写的原因是 github-pages 能自动将该仓库用为 github-pages 的域名所在仓库，即后面不用跟项目名了。<br>进入该仓库，进入设置页面<code>Settings =&gt; Options</code>里面有一个<code>GitHub Pages</code>配置，如图所示:<img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20201105171032.png" alt="github pages 设置截图"><br>这里可以设置分支，默认 github 是会新建一个 gh-pages 的分支。</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>这里使用的全局安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>新建一个项目，项目名就叫 blog。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>有几个快捷键比较常用</p>
<ol>
<li><code>hexo clean</code>清空生成的静态文件和缓存。</li>
<li><code>hexo s</code>是<code>hexo server</code>的缩写，启动一个默认 4000 端口的本地服务。</li>
<li><code>hexo n [name]</code>是<code>hexo new [name]</code>的缩写，新建一篇文章</li>
<li><code>hexo g</code>是<code>hexo generate</code>的缩写，生成静态文件。</li>
<li><code>hexo d</code>是<code>hexo deploy</code>的缩写，部署到配置的仓库或者服务器。</li>
</ol>
<p>生成静态文件和部署可以用一条命令表示<code>hexo g -d</code>或者<code>hexo d -g</code>。<br>安装完成之后有几个主要的文件和目录，配置文件<code>_config.yml</code>，<code>source</code>文件夹是放文章和样式图片等。<code>themes</code>是用于放主题文件。</p>
<h2 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h2><p>安装完成之后在<code>_config.yml</code>配置。<br><code>theme: next</code>这里配置主题的名字，主题放 themes 文件夹下。这里配置的是 next 主题。<br>这里采用 git 方式部署博客，先安装一个 hexo-deployer-git。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成之后在<code>_config.yml</code>里配置部署的服务。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/FreedomAnt/freedomant.github.io.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里分支选择 gh-pages，就是<a href="#github-%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93">github 新建仓库</a>里的生成分支。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo n [文章名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里写完文章以后依次输入以下命令：</p>
<p>清空缓存</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>本地先跑一个服务看下效果</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>生成静态文件并部署</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样就生成了博客，在浏览器输入地址即可访问<code>https://freedomant.github.io</code>，如果你买了域名可以添加到 source 下面的 CNAME 文件。如果需要修改主题的配置文件，可以在项目根目录下面新建一个<code>_config.[theme name].yml</code>，将<code>themes/next/_config.yml</code>里面的内容复制到这个文件，修改主题就在这个文件修改就行。这里用的 next 主题<code>_config.next.yml</code>。这个文件里面的内容在静态页面生成的时候会覆盖掉<code>themes/next/_config.yml</code>的内容。</p>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>图床这里也是白 piao 的 github，先在 github 里面新建一个项目用于图床。token 生成方式在 github 里面，点击右上角头像<code>Settings =&gt; Developers Settings =&gt; Personal access tokens =&gt; Generate new token</code>这里注意勾选 repo 下的选项。如图所示：<br><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20201105175136.png" alt="github 配置图床Token"><br>下载好 PicGGo 之后点击图床设置，选择 GitHub 图床，配置如下：<br><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20201105174115.png" alt="PicGGo中GitHub图床配置"><br>这里的自定义域名有讲究的，填写<code>https://cdn.jsdelivr.net/gh/FreedomAnt/image@main</code>，用 jsdelivr 的黑科技完成 CDN 加速。</p>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>这里我使用的 vscode 写的文章，vscode 安装插件<code>Markdown All in One</code>、<code>Markdwon Preview Enhanced</code>等。也安装有 typora 软件，typora 是一个所见即所得(WYSIWYG)的 markdown 软件，非常不错。而且 typora 集成 PicGo，typora 的<code>文件 =&gt; 偏好设置 =&gt; 图像 =&gt; 上传服务设定</code>里面选择 PicGo(app)的方式，PicGo-Core 的命令行的方式不是太方便。<br><strong>这里需要注意 PicGo 默认的服务端口开的是 36677，在 PicGo 里<code>PicGo设置 =&gt; 设置Server</code>可设置监听端口，如果想要配置 typora 里面的 PicGo，需要注意测试 PicGo 连接的服务地址端口是不是 36677。</strong></p>
<h2 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h2><p>next 主题自带的评论插件里面有<code>changyan | disqus | disqusjs | gitalk | livere | valine</code>，这里我选择的 gitalk，对比了几个之后还是选择了 github 的黑科技。valine 也不错，不过我看到 github 上面写 src 目录停止更新的信息，就还是选择了 gitalk。<br>gitalk 配置需要客户端的 id 和密钥。还是在 github 里面生成。<br>进入 github，点击右上角头像<code>Settings =&gt; Developers Settings =&gt; OAuth Apps =&gt; new OAuth Apps</code>。<code>Homepage URL</code>和<code>Authorization callback URL</code>都填写<code>https://freedomant.github.io/</code>，生成的客户端 id 和密钥填到主题配置里面。</p>
<h2 id="部署到-Vercel"><a href="#部署到-Vercel" class="headerlink" title="部署到 Vercel"></a>部署到 Vercel</h2><p>Vercel 是一个提供使用简单命令就可部署静态页面的服务，由于 github 访问速度慢的原因，在使用测速软件分别测试了很多常见的静态网页部署服务之后，发现比较快的就是国内的 coding 和 gitee，再就是腾讯阿里的对象存储了，Vercel 算是国外里面比较快的了，而且和 github 无缝对接。如果不想花钱买 CDN 加速或者对象存储，可以使用 Vercel，Vercel 以前叫 zeit，安装了之后直接使用一行<code>now XXXX</code>命令就可完成部署。目前已经更名为 Vercel。用 github 关联登录之后，点击<code>Import Preject =&gt; Import Git Repository =&gt; continue</code>填写你的仓库地址<code>https://github.com/FreedomAnt/freedomant.github.io.git</code>。部署命令那不用填写，默认就行。部署好之后就会生成访问的地址了。<br>Vercel 还支持修改默认的分支，进入到关联的项目，点击<code>Settings =&gt; Git =&gt; Production Branch</code>可以修改成博客所在的 gh-pages 分支。<br>Vercel 还支持自定义域名，点击<code>Settings =&gt; Domains</code>一般域名后缀填写 XXX.now.sh 或者 XXX.vercel.app。前一个是 Vercel 未改名前的默认生成后缀，后一个是改名后的默认生成后缀。至此，部署到 Vercel 成功。<br>当调用命令<code>hexo g -d</code>部署到 github 时，会触发 Vercel 的部署，一键部署到两个地方，完美！</p>
<p><strong>注意：博客原文件和静态页面的分开放两个仓库，博客原文件可以用私有仓库，里面有一些个人配置的信息</strong></p>
]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>github-pages</tag>
        <tag>gitalk</tag>
        <tag>zeit</tag>
        <tag>vercel</tag>
        <tag>markdown</tag>
        <tag>typora</tag>
        <tag>picgo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>git push 报错解决</title>
    <url>/Bug%E8%A7%A3%E5%86%B3/Git/git-push-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>记一次 <code>git push</code> 的报错解决。</p>
<a id="more"></a>

<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>用 hexo 写博客提交的时候报错了 fatal: TaskCanceledException encountered.，有时候是这个 fatal: HttpRequestException encountered.<br>使用网上的方式均不管用，下载了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9HaXQtQ3JlZGVudGlhbC1NYW5hZ2VyLWZvci1XaW5kb3dzL3JlbGVhc2Vz">凭证管理<i class="fa fa-external-link-alt"></i></span>安装完成，也下载了新版本的 git 并更新。用以下命令行的方式也试过。</p>
<p>配置 credential.helper 为 manager。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config --global credential.helper manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>试过了，不行。</p>
<p>删除系统级别的 credential.helper。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config --system --unset credential.helper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也不行。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>git 的配置指令有 3 个层级，详细信息可参考 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">git-scm.com<i class="fa fa-external-link-alt"></i></span> 的 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jb25maWc=">git-config<i class="fa fa-external-link-alt"></i></span>。<br>分别是</p>
<ul>
<li>system（系统级别）</li>
<li>global（用户级别）</li>
<li>local（仓库级别）</li>
</ul>
<p>优先级为 local &gt; global &gt; system。local 位置在项目的<code>.git/config</code>，global 位置在每个用户的<code>~/.gitconfig</code>，system 位置在 git 安装目录的<code>etc/gitconfig</code>。我们可以直接修改文件，或者用命令行的方式修改。详细查看<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyLyVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OS1HaXQtJUU5JTg1JThEJUU3JUJEJUFFLUdpdA==">自定义 Git - 配置 Git<i class="fa fa-external-link-alt"></i></span></p>
<p>读取配置命令分别为：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config --local --list
$ git config --global --list
$ git config --system --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>查找<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlQjclQTUlRTUlODUlQjctJUU1JTg3JUFEJUU4JUFGJTgxJUU1JUFEJTk4JUU1JTgyJUE4">Git 的系统凭证管理<i class="fa fa-external-link-alt"></i></span>，credential.helper 可选的存储方式为:</p>
<h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在 15 分钟后从内存中清除。</p>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>将凭证用明文的形式存放在磁盘中，并且永不过期。 这意味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你的凭证信息。 这种方式的缺点是你的密码是用明文的方式存放在你的 home 目录下。</p>
<h3 id="osxkeychain"><a href="#osxkeychain" class="headerlink" title="osxkeychain"></a>osxkeychain</h3><p>如果你使用的是 Mac，Git 还有一种 “osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙串中。 这种方式将凭证存放在磁盘中，并且永不过期，但是是被加密的，这种加密方式与存放 HTTPS 凭证以及 Safari 的自动填写是相同的。</p>
<h3 id="manager"><a href="#manager" class="headerlink" title="manager"></a>manager</h3><p>如果你使用的是 Windows，你可以安装一个叫做 “Git Credential Manager for Windows” 的辅助工具。 这和上面说的 <code>osxkeychain</code>十分类似，但是是使用 <code>Windows Credential Store</code> 来控制敏感信息。 可以在<code>https://github.com/Microsoft/Git-Credential-Manager-for-Windows</code> 下载。</p>
<p>git 在本地有多种方式来存储本地凭证。存储方式有三种：manager、wincred 和 store，可以在 git 安装目录的<code>mingw64/libexec/git-core</code> 路径下找到对应的 exe 文件：<code>git-credential-manager</code>、<code>git-credential-store</code> 和 <code>git-credential-wincred</code>。wincred 是 Windows 默认的凭证存储模式，其中 manager 模式也是采用的 store 的方式来存储。</p>
<p>其中用 manager 会把用户信息加密，wincred 则不会。</p>
<p>这里可以先把原有的 credential.helper 删除</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config --local --unset credential.helper
$ git config --global --unset credential.helper
$ git config --system --unset credential.helper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>然后再配置 credential.helper 为 manager</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config --global credential.helper manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看是否配置成功</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config --global --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>问题解决。</p>
]]></content>
      <categories>
        <category>Bug解决</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>credential</tag>
      </tags>
  </entry>
  <entry>
    <title>github图片加载不出来问题解决</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/github%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%87%BA%E6%9D%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>最近 github 上图片一直加载不出来，以前是用的 Chrome 插件 Ghelper，最近 Ghelper 开启之后 github 无法访问，这里用了另外一种解决方法。</p>
<a id="more"></a>

<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>github 上面图片加载有问题。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这里我们设置域名指定 ip，以 Windwos 系统为例，文件位置在<code>C:\Windows\System32\drivers\etc</code>，打开之后添加以下代码</p>
<pre class="line-numbers language-none"><code class="language-none"># GitHub Start
192.30.255.112	gist.github.com
192.30.255.112	github.com
192.30.255.112	www.github.com
151.101.56.133	avatars0.githubusercontent.com
151.101.56.133	avatars1.githubusercontent.com
151.101.56.133	avatars2.githubusercontent.com
151.101.56.133	avatars3.githubusercontent.com
151.101.56.133	avatars4.githubusercontent.com
151.101.56.133	avatars5.githubusercontent.com
151.101.56.133	avatars6.githubusercontent.com
151.101.56.133	avatars7.githubusercontent.com
151.101.56.133	avatars8.githubusercontent.com
151.101.56.133	camo.githubusercontent.com
151.101.56.133	cloud.githubusercontent.com
151.101.56.133	gist.githubusercontent.com
151.101.56.133	marketplace-screenshots.githubusercontent.com
151.101.56.133	raw.githubusercontent.com
151.101.56.133	repository-images.githubusercontent.com
151.101.56.133	user-images.githubusercontent.com
# GitHub End<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再去打开 github，图片加载成功。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>node+npm更新</title>
    <url>/Bug%E8%A7%A3%E5%86%B3/Node/node-npm%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>由于家里的电脑很久没使用 node，近期写博客发现 node 版本比较低，需要升级。<br>这里把升级遇到的坑点，记录一下。</p>
<a id="more"></a>

<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在试过网上推荐的几个方式更新 node 版本都不行之后，就决定把 node 卸载了重新下载一个新版本安装。卸载再安装之后发现 node 版本倒是更新了，npm 的版本还是停留在老版本。</p>
<p>查看 node 版本：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看 npm 版本：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>经过查找发现在<code>C:\Users\用户名\AppData\Roaming</code>文件夹下有一个 npm 和 npm-cache 文件，这里应该有 npm 的缓存之类的，狠心删除之后，再卸载 node 重新安装一次。npm 终于是更新了。</p>
]]></content>
      <categories>
        <category>Bug解决</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>npm-cache</tag>
      </tags>
  </entry>
  <entry>
    <title>rocket.chat开源聊天服务器搭建</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/rocket-chat%E5%BC%80%E6%BA%90%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>近日使用 Rocket.Chat 搭建了一个聊天服务器，踩坑较多，写下以备后期查阅。</p>
<a id="more"></a>

<h1 id="启动一个数据库"><a href="#启动一个数据库" class="headerlink" title="启动一个数据库"></a>启动一个数据库</h1><ol>
<li><p>启动一个 mongo 实例并初始化 replicaSet</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run --name db -d mongo:4.0 --smallfiles --replSet rs0 --oplogSize <span class="token number">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker <span class="token builtin class-name">exec</span> -ti db mongo --eval <span class="token string">"printjson(rs.initiate())"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h1 id="启动-Rocket-Chat"><a href="#启动-Rocket-Chat" class="headerlink" title="启动 Rocket.Chat"></a>启动 Rocket.Chat</h1><ol>
<li><p>启动一个 Rocket.Chat 并连接到 mongo 的实例上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run -p <span class="token number">3000</span>:3000 --name rocketchat --link db --env <span class="token assign-left variable">MONGO_OPLOG_URL</span><span class="token operator">=</span>mongodb://db:27017/local -d rocket.chat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h1 id="配置网页端"><a href="#配置网页端" class="headerlink" title="配置网页端"></a>配置网页端</h1><ol>
<li><p>打开浏览器<code>http://localhost:3000</code></p>
</li>
<li><p>配置账号邮箱密码<code>admin/123456</code>，成功之后再增加一个 admin2 的账号<code>admin2/123456</code></p>
<img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424001637.png" />

</li>
</ol>
<h1 id="配置手机端"><a href="#配置手机端" class="headerlink" title="配置手机端"></a>配置手机端</h1><p>由于 Rocket.Chat 的手机端需要配置 https 的服务器，nginx 配置 https 则需要 CA 证书，CA 证书的申请 CSR 的字段<code>common name</code>需要配置具体的域名，这里将域名定为<code>test.fanta.cn</code>并配置解析到本机。</p>
<h2 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h2><ol>
<li><p>电脑打开<code>C:\Windows\System32\drivers\etc\hosts</code>，增加以下代码</p>
<pre class="line-numbers language-none"><code class="language-none">127.0.0.1       test.fanta.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果编辑之后保存不了，将当前用户的权限提高，右键点击<code>hosts</code>–&gt;属性–&gt;安全–&gt;编辑，选中当前用户，勾选允许</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424201050.png"></p>
</li>
</ol>
<h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><h3 id="生成自签名证书"><a href="#生成自签名证书" class="headerlink" title="生成自签名证书"></a>生成自签名证书</h3><ol>
<li><p>检测下是否安装 openssl</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ openssl version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>生成私钥</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ openssl genrsa -des3 -out server.pass.key <span class="token number">2048</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入密码</p>
</li>
<li><p>去除私钥中的密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ openssl rsa -in server.pass.key -out server.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>生成 CSR(证书签名请求)</p>
<blockquote>
<p><strong>注意自签名请求 csr 中的 Common Name 必须写域名(这里写 test.fanta.cn)，如果是测试，可以写 localhost</strong></p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ openssl req -new -key server.key -out server.csr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424202317.png"></p>
</li>
<li><p>生成自签名 SSL 证书</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -days 证书有效期</span>
$ openssl x509 -req -days <span class="token number">365</span> -in server.csr -signkey server.key -out server.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>拷贝密钥和 CA 证书到 Nginx</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> server.key /etc/nginx/certificate.key
$ <span class="token function">cp</span> server.crt /etc/nginx/certificate.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>设置秘钥文件权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token number">400</span> /etc/nginx/certificate.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>生成 ssl_dhparam 文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ openssl dhparam -out /etc/nginx/dhparams.pem <span class="token number">2048</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><ol>
<li><p>编辑<code>nginx.conf</code>文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vi</span> /etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参考<span class="exturl" data-url="aHR0cHM6Ly9yb2NrZXQuY2hhdC9kb2NzL2luc3RhbGxhdGlvbi9kb2NrZXItY29udGFpbmVycy8jNWItc2VsZi1zaWduZWQtc3Ns">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># HTTPS Server</span>
    <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>
        <span class="token keyword">server_name</span> test<span class="token punctuation">.</span>fanta<span class="token punctuation">.</span>cn<span class="token punctuation">;</span>

        <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>rocketchat_error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>

        <span class="token keyword">ssl_certificate</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>certificate<span class="token punctuation">.</span>crt<span class="token punctuation">;</span>
        <span class="token keyword">ssl_certificate_key</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>certificate<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
        <span class="token keyword">ssl_dhparam</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>dhparams<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>
        <span class="token keyword">ssl_protocols</span> TLSv1<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">ssl_ciphers</span> <span class="token string">'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA'</span><span class="token punctuation">;</span>
        <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>
        <span class="token keyword">ssl_session_cache</span> shared<span class="token punctuation">:</span><span class="token keyword">SSL</span><span class="token punctuation">:</span><span class="token number">20</span>m<span class="token punctuation">;</span>
        <span class="token keyword">ssl_session_timeout</span> <span class="token number">180</span>m<span class="token punctuation">;</span>

        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.4</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto <span class="token keyword">https</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Nginx<span class="token operator">-</span><span class="token keyword">Proxy</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_redirect</span> off<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>测试 nginx 配置文件是否正确</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>启动 nginx</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> nginx start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<p>这时候电脑端打开链接<code>https://test.fanta.cn</code>，Nginx 会报 502 的错误。这里需要防火墙需要打开 3000 端口。如果没有错误，则跳过下面防火墙放开 3000 端口这一步。</p>
<p><strong>我测试的环境用的 Nginx 是安装在 windows 的 wsl 的 ubuntu 系统里面，而我的 docker 是 windows 版本的直接安装在 windows 的，这里需要注意：docker 开放的 3000 端口只是对宿主机(windows10)开放，windows 里面的子系统 wsl 是读不到 docker 里面启动的 RocketChat 的，在 windows 里面<code>ipconfig</code>能看到 windows 的 ip 地址前缀为 192.168，docker 的前缀为 172.24，wsl 的前缀为 172.31。</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424203602.png"></p>
<h2 id="放开-3000-端口"><a href="#放开-3000-端口" class="headerlink" title="放开 3000 端口"></a>放开 3000 端口</h2><p>这时候手机端也是连接不上电脑端的 3000 端口（可以用<code>JuiceSSH</code>本地连接手机之后 telnet 一下电脑的 3000 端口），需要在防火墙侧增加一个 3000 端口开放的规则（这里电脑系统为 win10）。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424194951.jpg"></p>
<ol>
<li>按下<code>win+s</code>键，搜索“防火墙”。</li>
<li>打开高级安全 Windows Defender 防火墙</li>
<li>新建“入站规则”，选择端口</li>
</ol>
<img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424181725.png" />

<ol start="4">
<li>选择特定端口 3000</li>
</ol>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424181931.png"></p>
<ol start="5">
<li>下一步到完成。</li>
</ol>
<p>这时候电脑端打开<code>https://test.fanta.cn</code>则可以打开 Rocket.Chat</p>
<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><h3 id="下载-App"><a href="#下载-App" class="headerlink" title="下载 App"></a>下载 App</h3><p>Android 端 APP 并安装到手机，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JvY2tldENoYXQvUm9ja2V0LkNoYXQuUmVhY3ROYXRpdmUvcmVsZWFzZXM=">下载地址<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="打开-APP"><a href="#打开-APP" class="headerlink" title="打开 APP"></a>打开 APP</h3><p>填写服务器端地址</p>
<img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424193747.jpg" alt="1" style="width:50%;height:50%" />

<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>手机和电脑端连接同一个 wifi，由于电脑端本地开启了域名解析，手机端也需要开启域名解析才行。这里采用 Fiddle 设置代理的方式把手机连接到电脑，这样手机也有了电脑的域名解析。</p>
<ol>
<li><p>电脑端下载 Fiddle，<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZG93bmxvYWQvZmlkZGxlcg==">下载地址<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>设置 Fiddle</p>
<p>Tools–&gt;Options–&gt;Connections，记住端口号，并勾选<code>Allow remote computers to connect</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210424194243.png"></p>
</li>
<li><p>手机端在 wifi 里面设置手动代理，地址填写电脑端的地址<code>192.168.1.4</code>，端口填写<code>18888</code>，保存修改</p>
</li>
<li><p>这样就实现了手机都走电脑的代理。就实现了手机端域名解析<code>test.fanta.cn</code></p>
</li>
</ol>
<h3 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h3><p>点击连接到电脑的服务器，输入网友端申请的账号密码<code>admin2/123456</code>，就可以与 web 端或者 pc 端的 Rocket.Chat 通信了，对于 Rocket.Chat 还是有很多不了解的地方，用于生产环境的话还需要细细探索。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>rocket.chat</tag>
        <tag>nginx</tag>
        <tag>openssl</tag>
        <tag>fiddle</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus+grafana实现数据采集展示+邮件告警</title>
    <url>/%E5%BC%80%E5%8F%91/Devops/prometheus-grafana%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%B1%95%E7%A4%BA-%E9%82%AE%E4%BB%B6%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<h2 id="prometheus-grafana-实现数据采集展示-邮件告警"><a href="#prometheus-grafana-实现数据采集展示-邮件告警" class="headerlink" title="prometheus+grafana 实现数据采集展示+邮件告警"></a>prometheus+grafana 实现数据采集展示+邮件告警</h2><blockquote>
<p><strong>Prometheus Server：Prometheus 服务的主服务器<br>Node Exporter：收集 Host 硬件和操作系统的信息<br>cAdvrisor：负责收集 Host 上运行的容器信息<br>Grafana：用来展示 Prometheus 监控操作界面（给我们提供一个友好的 web 界面）</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="拉取并运行-node-exporter"><a href="#拉取并运行-node-exporter" class="headerlink" title="拉取并运行 node-exporter"></a>拉取并运行 node-exporter</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p <span class="token number">9100</span>:9100 <span class="token punctuation">\</span>
--name nodeexporter <span class="token punctuation">\</span>
-v d:/docker/node-exporter/host/proc:/host/proc <span class="token punctuation">\</span>
-v d:/docker/node-exporter/host/sys:/host/sys <span class="token punctuation">\</span>
-v d:/docker/node-exporter/rootfs:/rootfs <span class="token punctuation">\</span>
prom/node-exporter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>建好之后进入 shell 环境</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker <span class="token builtin class-name">exec</span> -it nodeexporter <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入<code>http://192.168.1.3:9100/</code>即可查看页面</p>
<h3 id="拉取并运行-cadvisor"><a href="#拉取并运行-cadvisor" class="headerlink" title="拉取并运行 cadvisor"></a>拉取并运行 cadvisor</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p <span class="token number">8080</span>:8080 <span class="token punctuation">\</span>
--name cadvisor <span class="token punctuation">\</span>
-v d:/docker/cadvisor/rootfs:/rootfs:ro <span class="token punctuation">\</span>
-v d:/docker/cadvisor/var/run:/var/run:rw <span class="token punctuation">\</span>
-v d:/docker/cadvisor/var/lib/docker:/var/lib/docker:ro <span class="token punctuation">\</span>
google/cadvisor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输入<code>http://192.168.1.3:8080/</code>即可查看页面</p>
<h3 id="拉取并运行-prometheus"><a href="#拉取并运行-prometheus" class="headerlink" title="拉取并运行 prometheus"></a>拉取并运行 prometheus</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p <span class="token number">9090</span>:9090 <span class="token punctuation">\</span>
--name prometheus <span class="token punctuation">\</span>
prom/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>配置文件在<code>/etc/prometheus/prometheus.yml</code><br>可以直接进 shell 环境修改。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker <span class="token builtin class-name">exec</span> -it prometheus <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也可以修改了之后删除此 container，重新新建</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p <span class="token number">9090</span>:9090 <span class="token punctuation">\</span>
--name prometheus <span class="token punctuation">\</span>
-v d:/docker/prometheus/opt/prometheus.yml:/etc/prometheus/prometheus.yml  <span class="token punctuation">\</span>
prom/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样将配置文件映射出来，<strong>配置文件也可以单独拷贝出来</strong>，代码如下</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker <span class="token function">cp</span> prometheus:/etc/prometheus/prometheus.yml ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改了配置文件之后可以用以下代码实现热加载</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">kill</span> -HUP <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入<code>http://192.168.1.3:9090/</code>即可查看页面</p>
<h3 id="拉取并运行-grafana"><a href="#拉取并运行-grafana" class="headerlink" title="拉取并运行 grafana"></a>拉取并运行 grafana</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p <span class="token number">3000</span>:3000 <span class="token punctuation">\</span>
--name grafana <span class="token punctuation">\</span>
-v d:/docker/grafana/grafana-storage:/var/lib/grafana <span class="token punctuation">\</span>
grafana/grafana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>输入<code>http://192.168.1.3:3000/</code>即可查看页面<br>初始密码为 admin/admin，首次登陆需要修改密码。</p>
<h3 id="拉取并允许-alertmanager"><a href="#拉取并允许-alertmanager" class="headerlink" title="拉取并允许 alertmanager"></a>拉取并允许 alertmanager</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p <span class="token number">9093</span>:9093 <span class="token punctuation">\</span>
--name alertmanager <span class="token punctuation">\</span>
prom/alertmanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>输入<code>http://192.168.1.3:9093/</code>即可查看页面<br>配置文件在<code>/etc/alertmanager/alertmanager.yml</code></p>
<h3 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h3><p>修改 prometheus 的配置文件，其中 scrape_configs 的配置部分修改为</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> job_name<span class="token punctuation">:</span> <span class="token string">'prometheus'</span>
    static_configs<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> targets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'192.168.1.3:9090'</span><span class="token punctuation">]</span>
  <span class="token punctuation">-</span> job_name<span class="token punctuation">:</span> <span class="token string">'cadvisor'</span>
    static_configs<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> targets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'192.168.1.3:8080'</span><span class="token punctuation">]</span>
  <span class="token punctuation">-</span> job_name<span class="token punctuation">:</span> <span class="token string">'node'</span>
    scrape_interval<span class="token punctuation">:</span> 8s
    static_configs<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> targets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'192.168.1.3:9100'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输入<code>kill -HUP 1</code>重新加载配置文件，输入<code>http://192.168.1.3:3000/</code>进入 grafana 控制台</p>
<ol>
<li>新增并配置 datasource，地址填写 prometheus 的地址即可</li>
<li>进入 grafana 官网找 dashboard 的模板，记下模板号，到 grafana 页面的 dashboard 页面 import 即可。</li>
</ol>
<h3 id="邮件报警"><a href="#邮件报警" class="headerlink" title="邮件报警"></a>邮件报警</h3><p>修改 prometheus 的配置文件，其中部分配置修改为</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">alerting</span><span class="token punctuation">:</span>
  alertmanagers<span class="token punctuation">:</span>
  <span class="token punctuation">-</span> static_configs<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> targets<span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 192.168.1.3<span class="token punctuation">:</span><span class="token number">9093</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"node_down.yml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在该配置文件的同级目录下新建 node_down.yml 文件</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">groups</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> name<span class="token punctuation">:</span> node_down
    rules<span class="token punctuation">:</span>
      <span class="token punctuation">-</span> alert<span class="token punctuation">:</span> InstanceDown
        expr<span class="token punctuation">:</span> up == 0
        for<span class="token punctuation">:</span> 1m
        labels<span class="token punctuation">:</span>
          user<span class="token punctuation">:</span> test
        annotations<span class="token punctuation">:</span>
          summary<span class="token punctuation">:</span> <span class="token string">"Instance &#123;&#123; $labels.instance &#125;&#125; down"</span>
          description<span class="token punctuation">:</span> <span class="token string">"&#123;&#123; $labels.instance &#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; has been down for more than 1 minutes."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输入</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker <span class="token builtin class-name">exec</span> -it alertmanager <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>进入 alertmanager 的 shell，配置 alertmanager 的配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">vi</span> /etc/alertmanager/alertmanager.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改为</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>
  resolve_timeout<span class="token punctuation">:</span> 5m
  smtp_from<span class="token punctuation">:</span> <span class="token string">"mailname@126.com"</span>
  smtp_smarthost<span class="token punctuation">:</span> <span class="token string">"smtp.126.com:25"</span>
  smtp_auth_username<span class="token punctuation">:</span> <span class="token string">"mailname@126.com"</span>
  smtp_auth_password<span class="token punctuation">:</span> <span class="token string">"XXXXXXXXXXX"</span>
  smtp_require_tls<span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">route</span><span class="token punctuation">:</span>
  group_by<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"alertname"</span><span class="token punctuation">]</span>
  group_wait<span class="token punctuation">:</span> 10s
  group_interval<span class="token punctuation">:</span> 10s
  repeat_interval<span class="token punctuation">:</span> 10m
  receiver<span class="token punctuation">:</span> <span class="token string">"email"</span>
<span class="token key atrule">receivers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> name<span class="token punctuation">:</span> <span class="token string">"email"</span>
    email_configs<span class="token punctuation">:</span>
      <span class="token punctuation">-</span> to<span class="token punctuation">:</span> <span class="token string">"mailname@qq.com"</span>
<span class="token key atrule">inhibit_rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> source_match<span class="token punctuation">:</span>
      severity<span class="token punctuation">:</span> <span class="token string">"critical"</span>
    target_match<span class="token punctuation">:</span>
      severity<span class="token punctuation">:</span> <span class="token string">"warning"</span>
    equal<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"alertname"</span><span class="token punctuation">,</span> <span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"instance"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中 smtp_auth_password 为邮件地址，也可以配置 qq 邮箱的报警，还可以配置企业微信和钉钉相关的报警。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>devops</tag>
        <tag>prometheus</tag>
        <tag>grafana</tag>
        <tag>数据采集</tag>
        <tag>邮件告警</tag>
      </tags>
  </entry>
  <entry>
    <title>tabindex之焦点移动</title>
    <url>/Bug%E8%A7%A3%E5%86%B3/Javascript/tabindex%E4%B9%8B%E7%84%A6%E7%82%B9%E7%A7%BB%E5%8A%A8/</url>
    <content><![CDATA[<p>记一次 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleA==">tabindex<i class="fa fa-external-link-alt"></i></span> 的焦点移动问题解决</p>
<a id="more"></a>

<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>由于博主目前所处行业是 IPTV，页面需要在 TV 端展示，所以基本上页面和遥控器打交道比较多。<br>这次项目是采用的 Android 的 webview 加载地址的方式拉起 url。<br>页面上用到了 pdfjs 用于浏览 pdf，在浏览器测试没有问题，进入页面聚焦之后可以实现上下翻页，但是在 Android 的 webview 中(模拟器开的 Android9.0 API28)，按“下”方向键没问题，按“上”方向键的时候焦点自动移动到了有 tabindex 的一个 button 上面，导致无法向上翻页。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>开始尝试了把页面上的 tabindex 的其他位置都去掉，结果按“上”方向键仍然能够自动聚焦到 button 上面，只有另寻他法，最后发现将 tabindex 所在的 dom 设置为不可见 visibility:hidden，焦点就不会自动移动过去了。</p>
]]></content>
      <categories>
        <category>Bug解决</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>tabindex</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+mqtt+protobuf的简单实践(1)</title>
    <url>/%E5%BC%80%E5%8F%91/MQTT/vue-mqtt-protobuf%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5-1/</url>
    <content><![CDATA[<h1 id="mqtt-协议的简单使用"><a href="#mqtt-协议的简单使用" class="headerlink" title="mqtt 协议的简单使用"></a>mqtt 协议的简单使用</h1><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，该协议构建于 TCP/IP 协议上，低开销、低带宽占用，在物联网、小型设备等方面应用较广。由 Broker(Server)+Pub/Sub 构成。</p>
<a id="more"></a>

<h2 id="创建一个-Broker"><a href="#创建一个-Broker" class="headerlink" title="创建一个 Broker"></a>创建一个 Broker</h2><p>这里我们使用了开源库<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vc2NhanMvYWVkZXM=">aedes<i class="fa fa-external-link-alt"></i></span>.broker 的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vc2NhanMvYWVkZXMvYmxvYi9tYWluL2RvY3MvQWVkZXMubWQ=">文档<i class="fa fa-external-link-alt"></i></span>，client 的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vc2NhanMvYWVkZXMvYmxvYi9tYWluL2RvY3MvQ2xpZW50Lm1k">文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="创建-mqtt-服务"><a href="#创建-mqtt-服务" class="headerlink" title="创建 mqtt 服务"></a>创建 mqtt 服务</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> aedes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./aedes"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>aedes<span class="token punctuation">.</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><p>mqtt 协议默认端口是 1883</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">1883</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server started and listening on port "</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>添加一个用户名密码的身份验证，这里账号密码设置为<code>user/123456</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 身份验证</span>
aedes<span class="token punctuation">.</span><span class="token function-variable function">authenticate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> username <span class="token operator">===</span> <span class="token string">"user"</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果身份验证失败，可以参考<span class="exturl" data-url="aHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3YzLjEuMS9vcy9tcXR0LXYzLjEuMS1vcy5odG1sI19UYWJsZV8zLjFfLQ==">错误码<i class="fa fa-external-link-alt"></i></span>,代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">aedes<span class="token punctuation">.</span><span class="token function-variable function">authenticate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!==</span> <span class="token string">"user"</span> <span class="token operator">||</span> password <span class="token operator">!==</span> <span class="token string">"123456"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Auth error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    error<span class="token punctuation">.</span>returnCode <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="监听客户端"><a href="#监听客户端" class="headerlink" title="监听客户端"></a>监听客户端</h3><ul>
<li>监听客户端连接</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">aedes<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"clientReady"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">"Client Connected: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>client <span class="token operator">?</span> client<span class="token punctuation">.</span>id <span class="token operator">:</span> client<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"to broker"</span><span class="token punctuation">,</span>
    aedes<span class="token punctuation">.</span>id
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>监听客户端断开</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">aedes<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"clientDisconnect"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">"Client Disconnected: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>client <span class="token operator">?</span> client<span class="token punctuation">.</span>id <span class="token operator">:</span> client<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"to broker"</span><span class="token punctuation">,</span>
    aedes<span class="token punctuation">.</span>id
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="创建发布端"><a href="#创建发布端" class="headerlink" title="创建发布端"></a>创建发布端</h2><h3 id="开启服务-1"><a href="#开启服务-1" class="headerlink" title="开启服务"></a>开启服务</h3><p>这里我们使用 mqtt 库，接口为<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXF0dCNhcGk=">API<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mqtt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mqtt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="连接到-broker"><a href="#连接到-broker" class="headerlink" title="连接到 broker"></a>连接到 broker</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> client <span class="token operator">=</span> mqtt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"mqtt://127.0.0.1:1883"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  username<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="监听连接"><a href="#监听连接" class="headerlink" title="监听连接"></a>监听连接</h3><p>监听并发布 protobuf 消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connected"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>options<span class="token punctuation">.</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> qos<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> retain<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发布主题消息</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="创建订阅端"><a href="#创建订阅端" class="headerlink" title="创建订阅端"></a>创建订阅端</h2><h3 id="开启服务-2"><a href="#开启服务-2" class="headerlink" title="开启服务"></a>开启服务</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mqtt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mqtt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="连接到-broker-1"><a href="#连接到-broker-1" class="headerlink" title="连接到 broker"></a>连接到 broker</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> client <span class="token operator">=</span> mqtt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"mqtt://127.0.0.1:1883"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  username<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="监听连接-1"><a href="#监听连接-1" class="headerlink" title="监听连接"></a>监听连接</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>options<span class="token punctuation">.</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> qos<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 订阅text消息</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="接收订阅消息"><a href="#接收订阅消息" class="headerlink" title="接收订阅消息"></a>接收订阅消息</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"当前topic："</span><span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="测试-demo"><a href="#测试-demo" class="headerlink" title="测试 demo"></a>测试 demo</h2><ul>
<li>启动服务器<code>node broker.js</code></li>
<li>启动发布端<code>node pub.js</code></li>
<li>启动订阅端<code>node sub.js</code></li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>MQTT</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mqtt</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+mqtt+protobuf的简单实践(2)</title>
    <url>/%E5%BC%80%E5%8F%91/MQTT/vue-mqtt-protobuf%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5-2/</url>
    <content><![CDATA[<h1 id="protobuf-的简单使用"><a href="#protobuf-的简单使用" class="headerlink" title="protobuf 的简单使用"></a>protobuf 的简单使用</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jbi9wcm90b2NvbC1idWZmZXJzLw==">protobuf<i class="fa fa-external-link-alt"></i></span>是 Google 提供的与语言无关，与平台无关的，一个具有高效的协议数据交换格式工具库(类似 Json)，但相比于 Json，Protobuf 有更高的转化效率。</p>
<a id="more"></a>

<h2 id="配置-protobuf-插件-可选"><a href="#配置-protobuf-插件-可选" class="headerlink" title="配置 protobuf 插件(可选)"></a>配置 protobuf 插件(可选)</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>vscode 里面安装 Clang-Format 和 vscode-proto3 两个插件，其中 Clang-Format 用于格式化，vscode-proto3 用于语法提示、编译等。</p>
<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>下载 llvm 用于 Clang-Format</p>
<p>vscode-proto3 是依赖于 Clang-Format 的，而 Clang-Format 的格式化依赖于 llvm 的 clang，所以这里的格式化要下载 llvm，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xsdm0vbGx2bS1wcm9qZWN0L3JlbGVhc2Vz">下载地址<i class="fa fa-external-link-alt"></i></span>，我这里是 windows 就选择的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xsdm0vbGx2bS1wcm9qZWN0L3JlbGVhc2VzL2Rvd25sb2FkL2xsdm1vcmctMTIuMC4wL0xMVk0tMTIuMC4wLXdpbjY0LmV4ZQ==">windows 版本<i class="fa fa-external-link-alt"></i></span>，下载完成后安装，安装完成之后在当前配置文件里面增加一行配置，后面是你安装的路径。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"clang-format.executable"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\LLVM\\bin\\clang-format.exe"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="编写-proto文件"><a href="#编写-proto文件" class="headerlink" title="编写.proto文件"></a>编写<code>.proto</code>文件</h2><p>这里我们定义一个<code>address.proto</code>，代码如下：</p>
<pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span>
<span class="token keyword">package</span> testprotobuf<span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">string</span> province <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> city <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> county <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们上一步如果安装了格式化插件的话，现在可以实现格式化和语法提示等。</p>
<h2 id="编译并测试"><a href="#编译并测试" class="headerlink" title="编译并测试"></a>编译并测试</h2><h3 id="方式一：使用-protoc"><a href="#方式一：使用-protoc" class="headerlink" title="方式一：使用 protoc"></a>方式一：使用 protoc</h3><h4 id="安装-protoc"><a href="#安装-protoc" class="headerlink" title="安装 protoc"></a>安装 protoc</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi9yZWxlYXNlcw==">下载地址<i class="fa fa-external-link-alt"></i></span>，这里我选择的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi9yZWxlYXNlcy9kb3dubG9hZC92My4xNS44L3Byb3RvYy0zLjE1Ljgtd2luNjQuemlw">windows 版本<i class="fa fa-external-link-alt"></i></span>，下载之后解压到目录，将目录<code>C:\Program Files\Protoc-3.15.8-win64\bin</code>配置到环境变量中。</p>
<ul>
<li><p>如果配置了 vscode-proto3 插件</p>
<p>在当前项目根目录下新建<code>.vscode/setting.json</code>，代码如下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"protoc"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\Protoc-3.15.8-win64\\bin\\protoc.exe"</span><span class="token punctuation">,</span>
    <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"--proto_path=$&#123;workspaceRoot&#125;"</span><span class="token punctuation">,</span>
      <span class="token string">"--js_out=import_style=commonjs,binary:."</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相关<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p4aDAvdnNjb2RlLXByb3RvMw==">配置查看<i class="fa fa-external-link-alt"></i></span>，这里的 path 是编译的 protoc 执行地址，options 就是 protoc 里面的 options 参数，可在终端通过<code>protoc --help</code>查看相关配置。<code>$&#123;workspaceRoot&#125;</code>为当前的项目根地址</p>
</li>
</ul>
<h4 id="编译-proto"><a href="#编译-proto" class="headerlink" title="编译 proto"></a>编译 proto</h4><ul>
<li><p>如果配置了 vscode-proto3 插件，在 vscode 端使用组合键<code>Ctrl+Alt+P</code>，点击<code>proto3:Complie This Proto</code>，编译为<code>address_pb.js</code></p>
</li>
<li><p>如果没有配置插件，则直接在终端里面使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ protoc --js_out<span class="token operator">=</span>import_style<span class="token operator">=</span>commonjs,binary:. address.proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中格式为<code>--js_out=[OPTIONS:]output_dir</code></p>
</li>
</ul>
<h4 id="node-测试"><a href="#node-测试" class="headerlink" title="node 测试"></a>node 测试</h4><p>添加 google-protobuf 包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> google-protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>新建文件<code>protoc_node.js</code>，代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> pb <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./address_pb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pb<span class="token punctuation">.</span>Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
address<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">"sichuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
address<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"chengdu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
address<span class="token punctuation">.</span><span class="token function">setCounty</span><span class="token punctuation">(</span><span class="token string">"gaoxin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// var bytes = address.serializeBinary();</span>
<span class="token comment">// var unBytes = pb.Address.deserializeBinary(bytes);</span>

<span class="token keyword">var</span> province <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> city <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> county <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getCounty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">province:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>province<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,city:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>city<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,county:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>county<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行文件<code>node protoc_node.js</code></p>
<p>打印结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">province:sichuan,city:chengdu,county:gaoxin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="web-测试"><a href="#web-测试" class="headerlink" title="web 测试"></a>web 测试</h4><p>web 情况下需要再次编译为 web 可用的 js 文件</p>
<ul>
<li><p>编写 export 文件</p>
<p>新建<code>address_export.js</code>，代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./address_pb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  DataProto<span class="token operator">:</span> address<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>编译为 web 可用文件</p>
<p>​ 编译后文件名为<code>address_web.js</code></p>
<ul>
<li><p>方式一：使用 browserify 编译</p>
<ul>
<li><p>安装文件的引用库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g require<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>安装 browserify</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g browserify<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>安装 protobuf 的库文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> google-protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>使用 browserify 编译</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ browserify address_export.js -o  address_web.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>方式二：使用 npx 编译</p>
<p><strong>推荐这种方式，不用安装其他库</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx browserify address_export.js -o  address_web.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<p>新建文件<code>protoc_brower.html</code></p>
<p>代码如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>protoc_brower<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_web.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">proto<span class="token punctuation">.</span>testprotobuf<span class="token punctuation">.</span>Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      address<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">"sichuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      address<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"chengdu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      address<span class="token punctuation">.</span><span class="token function">setCounty</span><span class="token punctuation">(</span><span class="token string">"wuhou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方式二：使用-protobufjs"><a href="#方式二：使用-protobufjs" class="headerlink" title="方式二：使用 protobufjs"></a>方式二：使用 protobufjs</h3><h4 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb3RvYnVmanMvcHJvdG9idWYuanM=">protobufjs 地址<i class="fa fa-external-link-alt"></i></span>，使用 protobufjs 的情况，可用直接加载<code>address.proto</code>文件</p>
<p>添加 protobufjs 包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> protobufjs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="node-测试-1"><a href="#node-测试-1" class="headerlink" title="node 测试"></a>node 测试</h5><p>新建文件<code>protobufjs_node.js</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> protobuf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"protobufjs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
protobuf<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../address.proto"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>

  <span class="token comment">// Obtain a message type</span>
  <span class="token keyword">var</span> address <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">lookupType</span><span class="token punctuation">(</span><span class="token string">"testprotobuf.Address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Exemplary payload</span>
  <span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    province<span class="token operator">:</span> <span class="token string">"sichuan"</span><span class="token punctuation">,</span>
    city<span class="token operator">:</span> <span class="token string">"chengdu"</span><span class="token punctuation">,</span>
    county<span class="token operator">:</span> <span class="token string">"gaoxin"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// Verify the payload if necessary (i.e. when possibly incomplete or invalid)</span>
  <span class="token keyword">var</span> errMsg <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Create a new message</span>
  <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// or use .fromObject if conversion is necessary</span>

  <span class="token comment">// Encode a message to an Uint8Array (browser) or Buffer (node)</span>
  <span class="token keyword">var</span> buffer <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ... do something with buffer</span>

  <span class="token comment">// Decode an Uint8Array (browser) or Buffer (node) to a message</span>
  <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ... do something with message</span>

  <span class="token comment">// If the application uses length-delimited buffers, there is also encodeDelimited and decodeDelimited.</span>

  <span class="token comment">// Maybe convert the message back to a plain object</span>
  <span class="token keyword">var</span> object <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行文件<code>node protobufjs_node.js</code></p>
<p>结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123; province: &#39;sichuan&#39;, city: &#39;chengdu&#39;, county: &#39;gaoxin&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="web-测试-1"><a href="#web-测试-1" class="headerlink" title="web 测试"></a>web 测试</h5><p>新建文件<code>protobufjs_brower.html</code>，添加 js，<code>protobuf.min.js</code>，这里我是下载下来了再添加</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>protobufjs_brower<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>protobuf.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
      protobuf<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../address.proto"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>

        <span class="token comment">// Obtain a message type</span>
        <span class="token keyword">var</span> address <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">lookupType</span><span class="token punctuation">(</span><span class="token string">"testprotobuf.Address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Exemplary payload</span>
        <span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
          province<span class="token operator">:</span> <span class="token string">"sichuan"</span><span class="token punctuation">,</span>
          city<span class="token operator">:</span> <span class="token string">"chengdu"</span><span class="token punctuation">,</span>
          county<span class="token operator">:</span> <span class="token string">"wuhou"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token comment">// Verify the payload if necessary (i.e. when possibly incomplete or invalid)</span>
        <span class="token keyword">var</span> errMsg <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Create a new message</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// or use .fromObject if conversion is necessary</span>

        <span class="token comment">// Encode a message to an Uint8Array (browser) or Buffer (node)</span>
        <span class="token keyword">var</span> buffer <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ... do something with buffer</span>

        <span class="token comment">// Decode an Uint8Array (browser) or Buffer (node) to a message</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ... do something with message</span>

        <span class="token comment">// If the application uses length-delimited buffers, there is also encodeDelimited and decodeDelimited.</span>

        <span class="token comment">// Maybe convert the message back to a plain object</span>
        <span class="token keyword">var</span> object <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="编译后使用"><a href="#编译后使用" class="headerlink" title="编译后使用"></a>编译后使用</h4><p>由于前端 web 页面直接使用.proto 文件不太好，这里我们转换成 js 文件引入</p>
<h5 id="安装-pbjs"><a href="#安装-pbjs" class="headerlink" title="安装 pbjs"></a>安装 pbjs</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g pbjs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看 cli 相关的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb3RvYnVmanMvcHJvdG9idWYuanMvYmxvYi9tYXN0ZXIvY2xpL1JFQURNRS5tZCNwYmpzLWZvci1qYXZhc2NyaXB0">命令<i class="fa fa-external-link-alt"></i></span>，或者终端使用以下命令查看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pbjs --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="编译-proto-1"><a href="#编译-proto-1" class="headerlink" title="编译 proto"></a>编译 proto</h5><p>这里我们使用 json-module 方式，也可以选择其他方式 json、static-module 等。生成文件<code>protobufjs_bundle.js</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pbjs -t json-module -w commonjs -o protobufjs_bundle.js address.proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或者使用 npx 方式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx pbjs -t json-module -w commonjs -o protobufjs_bundle.js address.proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="node-测试-2"><a href="#node-测试-2" class="headerlink" title="node 测试"></a>node 测试</h5><p>新建文件<code>protobufjs_bundle_node.js</code></p>
<p>代码如下:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> protoRoot <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./protobufjs_bundle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> address <span class="token operator">=</span> protoRoot<span class="token punctuation">.</span><span class="token function">lookupType</span><span class="token punctuation">(</span><span class="token string">"testprotobuf.Address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  province<span class="token operator">:</span> <span class="token string">"sichuan"</span><span class="token punctuation">,</span>
  city<span class="token operator">:</span> <span class="token string">"chengdu"</span><span class="token punctuation">,</span>
  county<span class="token operator">:</span> <span class="token string">"gaoxin"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">message = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> buffer <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">buffer = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> decoded <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">decoded = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">message &#x3D; &#123;&quot;province&quot;:&quot;sichuan&quot;,&quot;city&quot;:&quot;chengdu&quot;,&quot;county&quot;:&quot;gaoxin&quot;&#125;
buffer &#x3D; 10,7,115,105,99,104,117,97,110,18,7,99,104,101,110,103,100,117,26,6,103,97,111,120,105,110
decoded &#x3D; &#123;&quot;province&quot;:&quot;sichuan&quot;,&quot;city&quot;:&quot;chengdu&quot;,&quot;county&quot;:&quot;gaoxin&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="web-测试-2"><a href="#web-测试-2" class="headerlink" title="web 测试"></a>web 测试</h5><p>web 端如果是 require 的方式，会报<code>Require statement not part of import statement</code>错误，可用通过配置<code>.eslintrc.js</code>里面的<code>rules</code>，添加以下规则解决：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"@typescript-eslint/no-var-requires"</span><span class="token operator">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里建议还是通过以下代码编译为 es6 的方式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx pbjs -t json-module -w es6 -o protobufjs_es6_bundle.js address.proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 web 端可用通过 import 的方式引入代码</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> protoRoot <span class="token keyword">from</span> <span class="token string">"./protobufjs_es6_bundle.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>具体的测试方式和 node 一样的代码，这里就不做演示了，以上就是 protobuf 在 JavaScript 方面的简单使用。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>MQTT</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mqtt</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+mqtt+protobuf的简单实践(3)</title>
    <url>/%E5%BC%80%E5%8F%91/MQTT/vue-mqtt-protobuf%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5-3/</url>
    <content><![CDATA[<h1 id="vue3-mqtt-protobuf"><a href="#vue3-mqtt-protobuf" class="headerlink" title="vue3+mqtt+protobuf"></a>vue3+mqtt+protobuf</h1><p>这里我们使用 node 端模拟 broker+publish/subscribe，web 端用 vue3+mqtt 模拟 publish/subscribe，测试发现 mqtt 好像不能直接用于浏览器端，可用通过转换来实现<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21xdHRqcy9NUVRULmpzI2Jyb3dzZXI=">Brower 端的使用<i class="fa fa-external-link-alt"></i></span></p>
<a id="more"></a>

<h2 id="node-端"><a href="#node-端" class="headerlink" title="node 端"></a>node 端</h2><p>测试发现 mqtt 支持浏览器的话，需要转换为 websoket 的方式，就是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vc2NhanMvYWVkZXMvYmxvYi9tYWluL2RvY3MvRXhhbXBsZXMubWQjbXF0dC1zZXJ2ZXItb3Zlci13ZWJzb2NrZXQtdXNpbmctc2VydmVyLWZhY3Rvcnk=">MQTT over Websockets<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="创建-Broker"><a href="#创建-Broker" class="headerlink" title="创建 Broker"></a>创建 Broker</h3><p>新建<code>broker-ws.js</code>文件，代码如下，这里我们使用了<code>websocket-stream</code>库来实现<code>MQTT over Websockets</code>。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 创建mqtt服务器
 */</span>
<span class="token keyword">const</span> aedes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"aedes"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> httpServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"websocket-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> server<span class="token operator">:</span> httpServer <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> aedes<span class="token punctuation">.</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

httpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket server listening on port "</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 身份验证</span>
aedes<span class="token punctuation">.</span><span class="token function-variable function">authenticate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，password：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>password<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> username <span class="token operator">===</span> <span class="token string">"user"</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 客户端连接</span>
aedes<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"clientReady"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">"Client Connected: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>client <span class="token operator">?</span> client<span class="token punctuation">.</span>id <span class="token operator">:</span> client<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"to broker"</span><span class="token punctuation">,</span>
    aedes<span class="token punctuation">.</span>id
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 客户端断开</span>
aedes<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"clientDisconnect"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">"Client Disconnected: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>client <span class="token operator">?</span> client<span class="token punctuation">.</span>id <span class="token operator">:</span> client<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"to broker"</span><span class="token punctuation">,</span>
    aedes<span class="token punctuation">.</span>id
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="创建-client"><a href="#创建-client" class="headerlink" title="创建 client"></a>创建 client</h3><p>新建<code>client-ws.js</code>用于和浏览器端互相发布订阅</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mqtt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mqtt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> protobuf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"protobufjs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> mqtt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"ws://127.0.0.1:8888"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  username<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

protobuf<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./address.proto"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  address <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">lookupType</span><span class="token punctuation">(</span><span class="token string">"testmqtt.Address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">服务器连接成功，clientId为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>client<span class="token punctuation">.</span>options<span class="token punctuation">.</span>clientId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"vue-protobuf"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> qos<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 订阅消息</span>
  <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发布消息</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> messageBuffer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>messageBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> object <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">接收到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>client<span class="token punctuation">.</span>options<span class="token punctuation">.</span>clientId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">主题为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>topic<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的消息\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>
      object
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 发布消息
 */</span>
<span class="token keyword">function</span> <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    province<span class="token operator">:</span> <span class="token string">"sichuan"</span><span class="token punctuation">,</span>
    city<span class="token operator">:</span> <span class="token string">"chengdu"</span><span class="token punctuation">,</span>
    county<span class="token operator">:</span> <span class="token string">"gaoxin"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> errMsg <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> buffer <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"node-protobuf"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    qos<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    retain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span>postMessage<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="brower-端"><a href="#brower-端" class="headerlink" title="brower 端"></a>brower 端</h2><h3 id="生成-proto-js"><a href="#生成-proto-js" class="headerlink" title="生成 proto.js"></a>生成 proto.js</h3><p>这里我们采用 pbjs 的方式生成浏览器端可用的 js，使用 json-module 的方式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx pbjs -t json-module -w es6 -o address_proto.js address.proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="vue-配置"><a href="#vue-配置" class="headerlink" title="vue 配置"></a>vue 配置</h3><p>这里我们新建一个 vue 的项目</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ vue create testmqtt-protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>首先我们增加 mqtt 和 protobufjs 的库</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">$ yarn add mqtt protobufjs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>将生成的 address_proto.js 拷贝到项目中，并新建<code>mqtt.js</code>文件用于订阅发布</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"mqtt"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> protoRoot <span class="token keyword">from</span> <span class="token string">"@/proto/address_proto"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">mqtt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"ws://127.0.0.1:8888"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    username<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> address <span class="token operator">=</span> protoRoot<span class="token punctuation">.</span><span class="token function">lookupType</span><span class="token punctuation">(</span><span class="token string">"testmqtt.Address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">服务器连接成功，clientId为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>client<span class="token punctuation">.</span>options<span class="token punctuation">.</span>clientId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"node-protobuf"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> qos<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 订阅消息</span>
    <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发布消息</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> messageBuffer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>messageBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> object <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">接收到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>client<span class="token punctuation">.</span>options<span class="token punctuation">.</span>clientId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">主题为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>topic<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的消息\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>
        object
      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/**
   * 发布消息
   */</span>
  <span class="token keyword">function</span> <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      province<span class="token operator">:</span> <span class="token string">"sichuan"</span><span class="token punctuation">,</span>
      city<span class="token operator">:</span> <span class="token string">"chengdu"</span><span class="token punctuation">,</span>
      county<span class="token operator">:</span> <span class="token string">"wuhou"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> errMsg <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> message <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> buffer <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"vue-protobuf"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      qos<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      retain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span>postMessage<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> mqtt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在 Home.vue 文件中添加 mqtt.js</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> mqtt <span class="token keyword">from</span> <span class="token string">"@/utils/mqtt"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"@/components/HelloWorld.vue"</span><span class="token punctuation">;</span> <span class="token comment">// @ is an alias to /src</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    HelloWorld<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">mqtt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote>
<p>如果 vue 用 typescript 的方式，会提示需要定义 module，在<code>shims-vue.d.ts</code>文件中增加<code>declare module &#39;@/utils/mqtt&#39;</code>即可，</p>
<p>如果有提示需要增加返回值的情况，可在 eslint 中关闭，rules 增加<code>&quot;@typescript-eslint/explicit-module-boundary-types&quot;: &quot;off&quot;</code></p>
</blockquote>
<ul>
<li>启动 broker</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ node broker-ws.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>启动 client.js</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ node client-ws.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>启动 vue</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是我们能看到控制台打印为</p>
<ul>
<li>broker</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210502001809.png" alt="broker"></p>
<ul>
<li><p>client</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210502001842.png" alt="client"></p>
</li>
<li><p>brower</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210502001909.png" alt="brower"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>MQTT</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mqtt</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker+minio实现对象存储</title>
    <url>/%E5%BC%80%E5%8F%91/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/%E4%BD%BF%E7%94%A8docker-minio%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>本文主要介绍通过 docker+minio 实现对象存储的环境搭建。</p>
<a id="more"></a>

<h2 id="创建-minio-服务端"><a href="#创建-minio-服务端" class="headerlink" title="创建 minio 服务端"></a>创建 minio 服务端</h2><p>创建 minio 服务器并设置账号密码为 admin/12345678，密码至少需要 8 位数。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -d -p <span class="token number">9000</span>:9000 --name minio -v d:<span class="token punctuation">\</span>docker<span class="token punctuation">\</span>minio<span class="token punctuation">\</span>data:/data -e <span class="token string">"MINIO_ACCESS_KEY=admin"</span> -e <span class="token string">"MINIO_SECRET_KEY=12345678"</span> minio/minio server /data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这时候打开浏览器输入<code>http://127.0.0.1:9000/</code>能访问到 minio，输入账号密码即可进入。<br>进入页面之后新建一个 bucket，取名 testpic，然后上传几张图片。</p>
<h2 id="创建-minio-客户端"><a href="#创建-minio-客户端" class="headerlink" title="创建 minio 客户端"></a>创建 minio 客户端</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -itd --name minioclient --entrypoint<span class="token operator">=</span>/bin/sh minio/mc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="配置对象外部访问"><a href="#配置对象外部访问" class="headerlink" title="配置对象外部访问"></a>配置对象外部访问</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker <span class="token builtin class-name">exec</span> -it minioclient <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动客户端进入控制台<br>添加管理配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mc</span> config <span class="token function">host</span> <span class="token function">add</span> minio http://172.29.240.1:9000 admin <span class="token number">12345678</span> --api s3v4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p><strong>注意这里不能使用 127.0.0.1 地址。</strong></p>
</blockquote>
<p>添加完成后可通过</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> /root/.mc/config.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看配置文件如下</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span>
  <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"gcs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://storage.googleapis.com"</span><span class="token punctuation">,</span>
      <span class="token property">"accessKey"</span><span class="token operator">:</span> <span class="token string">"YOUR-ACCESS-KEY-HERE"</span><span class="token punctuation">,</span>
      <span class="token property">"secretKey"</span><span class="token operator">:</span> <span class="token string">"YOUR-SECRET-KEY-HERE"</span><span class="token punctuation">,</span>
      <span class="token property">"api"</span><span class="token operator">:</span> <span class="token string">"S3v2"</span><span class="token punctuation">,</span>
      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"dns"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"local"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:9000"</span><span class="token punctuation">,</span>
      <span class="token property">"accessKey"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token property">"secretKey"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token property">"api"</span><span class="token operator">:</span> <span class="token string">"S3v4"</span><span class="token punctuation">,</span>
      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"auto"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"minio"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://172.29.240.1:9000"</span><span class="token punctuation">,</span>
      <span class="token property">"accessKey"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>
      <span class="token property">"secretKey"</span><span class="token operator">:</span> <span class="token string">"12345678"</span><span class="token punctuation">,</span>
      <span class="token property">"api"</span><span class="token operator">:</span> <span class="token string">"s3v4"</span><span class="token punctuation">,</span>
      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"auto"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"play"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://play.min.io"</span><span class="token punctuation">,</span>
      <span class="token property">"accessKey"</span><span class="token operator">:</span> <span class="token string">"Q3AM3UQ867SPQQA43P2F"</span><span class="token punctuation">,</span>
      <span class="token property">"secretKey"</span><span class="token operator">:</span> <span class="token string">"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"</span><span class="token punctuation">,</span>
      <span class="token property">"api"</span><span class="token operator">:</span> <span class="token string">"S3v4"</span><span class="token punctuation">,</span>
      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"auto"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"s3"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://s3.amazonaws.com"</span><span class="token punctuation">,</span>
      <span class="token property">"accessKey"</span><span class="token operator">:</span> <span class="token string">"YOUR-ACCESS-KEY-HERE"</span><span class="token punctuation">,</span>
      <span class="token property">"secretKey"</span><span class="token operator">:</span> <span class="token string">"YOUR-SECRET-KEY-HERE"</span><span class="token punctuation">,</span>
      <span class="token property">"api"</span><span class="token operator">:</span> <span class="token string">"S3v4"</span><span class="token punctuation">,</span>
      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"dns"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这时候还不能通过外部访问到图片，如果输入<code>http://172.29.240.1:9000/testpic/avatar.png</code>会提示输入账号密码。<br>添加外部访问策略如下</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mc</span> policy <span class="token builtin class-name">set</span> public minio/testpic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加成功之后即可实现外部访问图片。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>对象存储</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>minio</tag>
      </tags>
  </entry>
  <entry>
    <title>使用puppeteer实现自动登录和测试页面</title>
    <url>/%E5%BC%80%E5%8F%91/%E6%B5%8B%E8%AF%95/%E4%BD%BF%E7%94%A8puppeteer%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E5%92%8C%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>近日需要用到自动登录的方式，于是找来了流行的 puppeteer 实现自动登录并测试页面，现记录一下实现的方式。</p>
<a id="more"></a>

<h2 id="获取-Browser-实例"><a href="#获取-Browser-实例" class="headerlink" title="获取 Browser 实例"></a>获取 Browser 实例</h2><p>关于 puppeteer 的文档可以查看<span class="exturl" data-url="aHR0cHM6Ly96aGFvcWl6ZS5naXRodWIuaW8vcHVwcGV0ZWVyLWFwaS16aF9DTi8=">Puppeteer<i class="fa fa-external-link-alt"></i></span><br>首先引入 puppeteer 库，这里我们选择的是 puppeteer 而不是 puppeteer-core，简单是说区别就是</p>
<ol>
<li>puppeteer-core 不会自动下载 Chromium</li>
<li>puppeteer-core 会忽略 PUPPETEER_*环境变量</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  headless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--start-maximized"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  ignoreDefaultArgs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--enable-automation"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  defaultViewport<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参数解释：</p>
<ul>
<li><code>headless: false</code><br>为了更好的看到现象，采用的非 headless，默认情况 headless 是 true</li>
<li><code>args: [&quot;--start-maximized&quot;]</code>内容铺满视频框。</li>
<li><code>ignoreDefaultArgs: [&quot;--enable-automation&quot;]</code>不显示测试环境控制的提示。</li>
<li><code>defaultViewport: null</code> 视口大小设置为全屏，默认是 800X600 的框。</li>
</ul>
<p>更多参数可参考<span class="exturl" data-url="aHR0cHM6Ly9wZXRlci5zaC9leHBlcmltZW50cy9jaHJvbWl1bS1jb21tYW5kLWxpbmUtc3dpdGNoZXMv">List Of Chromium Command Line Switches<i class="fa fa-external-link-alt"></i></span></p>
<p>这里是用 launch 的方式创建的 Browser 实例，也可以用 connect 方式</p>
<ul>
<li>puppeteer.connect: 连接一个已经开启浏览器 websoket 链接的 Chrome 实例</li>
<li>puppeteer.launch: 每次都启动一个 Chrome 实例</li>
</ul>
<p>connect 方式需要以 <code>remote-debugging-port</code> 参数启动 Chrome，具体参数参照<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWVkZXZ0b29scy5naXRodWIuaW8vZGV2dG9vbHMtcHJvdG9jb2wvI2hvdy1kby1pLWFjY2Vzcy10aGUtYnJvd3Nlci10YXJnZXQ=">Chrome DevTools Protocol<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li><p>以 <code>remote-debugging-port</code> 参数启动 Chrome</p>
<img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20201202165028.png" style="zoom:50%" />
</li>
<li><p>通过<code>http://$&#123;host&#125;:$&#123;port&#125;/json/version</code>获取到浏览器的一些信息。其中有 webSocketDebuggerUrl<br><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20201202165029.png" alt="查看Chrome信息"></p>
</li>
<li><p>实现连接</p>
</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">puppeteer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  browserWSEndpoint<span class="token operator">:</span> webSocketDebuggerUrl<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="测试自动登录"><a href="#测试自动登录" class="headerlink" title="测试自动登录"></a>测试自动登录</h2><p>由于我们项目采用了验证码，一般情况下有验证码的自动登录比较麻烦，如果验证码复杂的话需要借助验证码识别平台来做，如果用程序来破解涉及到灰度化，二值化，去除噪点，字符分割，训练模型，识别等等一系列的东西，用 OCR 识别等。这里我们就采用简单的方式来做，在申请验证码的时候接口返回了验证码的 base64 字符，我们获取到这个字符来解码。</p>
<p>代码如下</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> bPage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://ip:port/projectName/pages/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> finalResponse <span class="token operator">=</span> <span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">waitForResponse</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span>
    response<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"http://ip:port/projectName/getVerify"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> finalResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> codeStr <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[name=code]"</span><span class="token punctuation">,</span> codeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">"input[name=userName]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[name=userName]"</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">"input[name=password]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[name=password]"</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> bPage<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">"input[name=code]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>responseStr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  bPage<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  bPage<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">"button[lay-submit]"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="测试按键"><a href="#测试按键" class="headerlink" title="测试按键"></a>测试按键</h2><p>我们前端项目是在 TV 端，需要使用按键来测试页面。这里我们测试了之后保存页面的截图。<br>需要注意的是由于 js 在页面加载之后执行，这里做了一个延时 2s 的操作，具体的按键名称可以在 puppeteer 仓库中搜索<code>Keyboard</code>查找到<code>USKeyboardLayout.ts</code>，里面有详细按键名称。</p>
<p>代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fPage <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fPage<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://ip:port/projectName/page/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fPage<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fPage<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token string">"ArrowRight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fPage<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token string">"ArrowRight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fPage<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token string">"Enter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fPage<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">"screenshot.png"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fPage<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>开发</category>
        <category>测试</category>
      </categories>
      <tags>
        <tag>puppeteer</tag>
      </tags>
  </entry>
  <entry>
    <title>数据可视化工具选型参考</title>
    <url>/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E9%80%89%E5%9E%8B%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<p>本文主要对比现在的一些可视化工具方便技术选型。</p>
<a id="more"></a>

<h2 id="数据可视化工具"><a href="#数据可视化工具" class="headerlink" title="数据可视化工具"></a>数据可视化工具</h2><ul>
<li>Leaflet|28.9K|适合移动设备</li>
<li>Chartist.js|12.3K|创建响应式图表</li>
<li>d3|93.6K|svg+canvas+html</li>
<li>Plotly|12.2K|使用该工具通过上传 CSV 文件或连接到 SQL 数据库来创建 D3.js 图表和地图</li>
</ul>
<h2 id="纯可视化图表生成类"><a href="#纯可视化图表生成类" class="headerlink" title="纯可视化图表生成类"></a>纯可视化图表生成类</h2><ul>
<li>Echarts|42.8K|百度产品</li>
<li>AntV|蚂蚁金服</li>
<li>Highcharts|9.7K|可视化库，商用付费</li>
</ul>
<h2 id="可视化报表类"><a href="#可视化报表类" class="headerlink" title="可视化报表类"></a>可视化报表类</h2><ul>
<li>FineReport|报表软件，企业级应用，工作用小屏，决策用大屏。办公用微软，经营用帆软。</li>
</ul>
<h2 id="商业智能分析"><a href="#商业智能分析" class="headerlink" title="商业智能分析"></a>商业智能分析</h2><ul>
<li>Tableau|内置常用的分析图表，和一些数据分析模型</li>
<li>FineBI|内置丰富图表，不需要代码调用，可直接拖拽生成。可用于业务数据的快速分析，制作 dashboard，也可构建可视化大屏。</li>
<li>PowerBI|继 Excel 之后推出的 BI 产品，可以和 Excel 无缝连接使用，创建个性化的数据看板。</li>
</ul>
<h2 id="可视化大屏类"><a href="#可视化大屏类" class="headerlink" title="可视化大屏类"></a>可视化大屏类</h2><ul>
<li>DataV|主要用于业务数据与地理信息融合的大数据可视化,通过简单的拖拽配置就能生成可视化大屏或者仪表盘.</li>
<li>FineReport</li>
<li>数字冰雹</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>Chart.js|50.2K|Simple HTML5 Charts using the <code>&lt;canvas&gt;</code> tag</li>
<li>recharts|14.7K|Redefined chart library built with React and D3</li>
<li>charts|13.5K|Simple, responsive, modern SVG Charts with zero dependencies</li>
<li>dashboards|10.8K|Responsive dashboard templates 📊✨</li>
<li>G2|10K|📊 A highly interactive data-driven visualization grammar for statistical charts.</li>
<li>ZRender|4.5K|二维绘图引擎，它提供 Canvas、SVG、VML 等多种渲染方式。ZRender 也是 ECharts 的渲染器。</li>
</ul>
<hr>
<p>选型对比</p>
<blockquote>
<p>商业：阿里 DataV|腾讯云图|百度 Sugar</p>
<p>开发：Echarts|AntV|D3</p>
</blockquote>
<p>echarts 缺失灵活性的同时，带来的是使用上的便利。社区 echarts &gt; antv</p>
<hr>
<h3 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h3><p>一种 3D 绘图协议，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加 OpenGL ES 2.0 的一个 JavaScript 绑定，WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示 3D 场景和模型了，还能创建复杂的导航和数据视觉化。</p>
<h3 id="Three-js"><a href="#Three-js" class="headerlink" title="Three.js"></a>Three.js</h3><p>一款运行在浏览器中的 3D 引擎，你可以用它创建各种三维场景，包括了摄影机、光影、材质等各种对象。</p>
<h3 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h3><p>游戏引擎开发商，实时 3D 互动内容创作和运营平台。包括游戏开发、美术、建筑、汽车设计、影视制作在内的创作者运用 Unity 实现。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>回车换行问题</title>
    <url>/Bug%E8%A7%A3%E5%86%B3/Git/%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记录一次换行符引发的问题。</p>
<a id="more"></a>

<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>使用 git 提交的时候报错提示如下：<br>warning: LF will be replaced by CRLF in js/utils.js.<br>The file will have its original line endings in your working directory</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li>CR (Carriage Return) 回车</li>
<li>LR (Line Feed) 换行</li>
<li>CRLF (Carriage Return Line Feed) 回车换行</li>
</ul>
<p>早期的 MAC 系统使用 CR 进行换行，现在统一成 LF，Uninx 系统都是使用的 LF 换行，而 Windows 系统使用的 CRLF 当作换行。所以在多人协同开发的时候会造成兼容性问题。</p>
<h3 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h3><p>git 提供了一个<code>core.autocrlf</code>的配置，可以自动完成换行的转换，详见<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jb25maWc=">git-config<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>true<br>自动完成转换，在 push 的时候自动将换行符从 CRLF 换成 LF，在 pull 的时候将 LF 换成 CRLF。</li>
<li>input<br>push 转换，pull 不转换</li>
<li>false<br>都不转换</li>
</ul>
<p>这里设置全局<code>--global</code> 里的 <code>core.autocrlf</code> 为 false。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样设置之后有些可能有 LF 和 CRLF 混乱的问题，即出现 CRLF 和 LF 共同出现的情况。</p>
<h3 id="gitattributes"><a href="#gitattributes" class="headerlink" title=".gitattributes"></a>.gitattributes</h3><p>git 提供一个<code>.gitattributes</code>文件用于配置该项目一些属性配置，详见<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdGF0dHJpYnV0ZXM=">gitattributes<i class="fa fa-external-link-alt"></i></span></p>
<p>每行的格式为<code>pattern attr1 attr2 ...</code><br>pattern 配置</p>
<pre class="line-numbers language-none"><code class="language-none">* 匹配所有文件
*.txt 匹配所有 txt 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><p>其中 text 属性可以启用并控制行尾规范化</p>
<ul>
<li>text<br>在路径上设置属性可启用行尾规范化并将路径标记为文本文件。行尾转换不会猜测内容类型。</li>
<li>-text<br>Git 在签入或签出时不要尝试任何行尾转换。</li>
<li>auto<br>标记该路径以进行自动行尾转换。如果 Git 决定内容为文本，则其行尾在签入时转换为 LF。使用 CRLF 提交文件后，不会进行任何转换。</li>
<li>未指定<br>如果 text 未指定该属性，则 Git 使用 core.autocrlf 配置变量来确定是否应转换文件。</li>
</ul>
<h4 id="eol"><a href="#eol" class="headerlink" title="eol"></a>eol</h4><p>属性设置在工作目录中使用的特定行尾样式。</p>
<ul>
<li>crlf<br>此设置强制 Git 在签入时对此文件的行尾进行规范化，并在签出文件时将其转换为 CRLF。</li>
<li>lf<br>此设置强制 Git 在签入时将行尾标准化为 LF，并在签出文件时阻止转换为 CRLF。</li>
</ul>
<p>可设置如下</p>
<pre class="line-numbers language-none"><code class="language-none">* text eol&#x3D;lf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h3><p>也可以设置一个 <span class="exturl" data-url="aHR0cHM6Ly9lZGl0b3Jjb25maWcub3JnLw==">editorconfig<i class="fa fa-external-link-alt"></i></span> 来解决行尾转换的问题。这样在保存的时候自动规范化文件的内容。<br>editorconfig 的配置如下：</p>
<pre class="line-numbers language-none"><code class="language-none">end_of_line &#x3D; lf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Bug解决</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>autocrlf</tag>
        <tag>crlf</tag>
        <tag>lf</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建简易流媒体服务器</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>搭建流媒体服务器主要有三个部分，服务端+推流端+拉流端</p>
<ul>
<li><p>服务端：srs、nginx-rtmp</p>
</li>
<li><p>推流端：obs-studio、ffmpeg</p>
</li>
<li><p>拉流端：vlc 或者其他播放器</p>
</li>
</ul>
<p>这里我们基于 srs+obs-studio+vlc 实现搭建流媒体服务器，srs 与 nginx 以及其他流媒体服务端对比可以<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29zc3JzL3Nycy93aWtpL3YxX0NOX0NvbXBhcmU=">查看<i class="fa fa-external-link-alt"></i></span></p>
<a id="more"></a>

<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>SRS(Simple Realtime Server)是一个简单高效的实时视频服务器，支持 RTMP/WebRTC/HLS/HTTP-FLV/SRT/GB28181。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29zc3JzL3Nycw==">开源地址<i class="fa fa-external-link-alt"></i></span>，这里我们使用 3.0 的版本，v4 版本新增<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29zc3JzL3Nycy93aWtpL3Y0X0NOX1dlYlJUQyNjb25maWctY2FuZGlkYXRl">webrtc<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29zc3JzL3Nycy93aWtpL3YzX0NOX0hvbWU=">文档地址<i class="fa fa-external-link-alt"></i></span>，以 docker 的方式简易安装。<span class="exturl" data-url="aHR0cHM6Ly9vc3Nycy5uZXQv">官网地址<i class="fa fa-external-link-alt"></i></span>，RTMP 默认端口是 1935</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run -p <span class="token number">1935</span>:1935 -p <span class="token number">1985</span>:1985 -p <span class="token number">8080</span>:8080 ossrs/srs:3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动之后打开<code>http://192.168.8.123:8080/</code>，可以看到 SRS 已经启动成功</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210508155727.png" alt="SRS"></p>
<ul>
<li>若希望做低延迟直播（3-5 秒），可用 HTTP-FLV，播放器用<span class="exturl" data-url="aHR0cDovL2JpbGliaWxpLmdpdGh1Yi5pby9mbHYuanMvZGVtbw==">flv.js<i class="fa fa-external-link-alt"></i></span>，H5/MSE 播放 HTTP-FLV</li>
<li>若对延迟不敏感（5-10 秒），跨平台比较好，可用 HLS，播放器用<span class="exturl" data-url="aHR0cHM6Ly9obHMtanMubmV0bGlmeS5jb20vZGVtbw==">hls.js<i class="fa fa-external-link-alt"></i></span>，H5/MSE 播放 HLS</li>
<li>若希望超低延迟（1 秒内），只需要支持主流的浏览器，可用 WebRTC，播放器用<span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguOC4xMjM6ODA4MC9wbGF5ZXJzL3J0Y19wbGF5ZXIuaHRtbA==">RTC 播放器<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>如果想要自己编译，代码如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> clone -b <span class="token number">3</span>.0release https://gitee.com/ossrs/srs.git <span class="token operator">&amp;&amp;</span>
$ <span class="token builtin class-name">cd</span> srs/trunk <span class="token operator">&amp;&amp;</span> ./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> ./objs/srs -c conf/srs.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>其中配置文件为<code>conf/srs.conf</code>，日志为<code>./objs/srs.log</code></p>
</blockquote>
<h1 id="推流端"><a href="#推流端" class="headerlink" title="推流端"></a>推流端</h1><p>OBS Studio 是一个直播录制软件，应用广泛，开源免费，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ic3Byb2plY3Qvb2JzLXN0dWRpby9yZWxlYXNlcw==">开源下载地址<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9vYnNwcm9qZWN0LmNvbS8=">官网下载地址<i class="fa fa-external-link-alt"></i></span></p>
<p>选择适合自己系统的安装包，下载完成之后安装。</p>
<p>点击左下角“来源”的“+”号，选择媒体源</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210508160224.png" alt="选择来源"></p>
<p>这里我们选择一个本地的视频文件播放</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210508160458.png" alt="选择文件"></p>
<p>点击右下角设置—&gt;推流，填入我们的服务器地址<code>rtmp://192.168.8.123:1935/live</code>，串流密钥（即自定义的流名称）<code>livestream</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210508161121.png" alt="设置推流"></p>
<p>设置完成之后点击右下角“开始推流”，在 docker 控制台能看到打印的信息。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210508164251.png" alt="docker打印信息"></p>
<blockquote>
<p>如果需要用 ffmpeg 推流的话，代码如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run --network<span class="token operator">=</span>host ossrs/srs:encoder ffmpeg -re -i ./doc/source.flv <span class="token punctuation">\</span>
  -c copy -f flv -y rtmp://localhost/live/livestream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>视频文件名<code>./doc/source.flv</code></p>
</blockquote>
<h1 id="拉流端"><a href="#拉流端" class="headerlink" title="拉流端"></a>拉流端</h1><p>打开 VLC 播放器，选择媒体–&gt;打开网络串流。输入地址</p>
<ul>
<li>RTMP 地址<code>rtmp://192.168.8.123:1935/live/livestream</code></li>
<li>H5(HTTP-FLV)地址<code>http://192.168.8.123:8080/live/livestream.flv</code></li>
<li>H5(HLS)地址<code>http://192.168.8.123:8080/live/m3u8.flv</code></li>
</ul>
<p>H5 的地址也可以用本地在线的 SRS 播放器<span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguOC4xMjM6ODA4MC9wbGF5ZXJzL3Nyc19wbGF5ZXIuaHRtbCU2MA==">http://192.168.8.123:8080/players/srs_player.html`<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/FreedomAnt/image@main/img/20210508164643.png" alt="VLC播放"></p>
<p>如果需要采集摄像头的话，在 obs-studio 的左下角”来源”选择”视频采集设备”即可。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>srs</tag>
        <tag>live</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库字符集不匹配</title>
    <url>/Bug%E8%A7%A3%E5%86%B3/Database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8D%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>开发中遇到一个数据库字符集的问题 Caused by: java.sql.SQLException: Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation ‘=’</p>
<a id="more"></a>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>设置数据库的字符集为 utf-8</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ALTER table action CONVERT TO CHARACTER SET utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Bug解决</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>文档在线预览</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<p>项目上需要在线预览 office 文件，项目为外面是 Android webview 壳子，里面为前端 H5 页面，在网上搜集了一些在线预览 office 的解决方式，整理出来。</p>
<a id="more"></a>

<h2 id="网上资源"><a href="#网上资源" class="headerlink" title="网上资源"></a>网上资源</h2><ol>
<li>微软提供的在线预览，地址为<code>https://view.officeapps.live.com/op/embed.aspx?src=外网office文件地址</code>。</li>
<li>百度文库、金山 WPS 都提供收费在线预览，或者业内付费产品有<span class="exturl" data-url="aHR0cDovL3d3dy55b3pvZGNzLmNvbS8=">永中 office<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL3d3dy5vZmZpY2V3ZWIzNjUuY29tLw==">office365<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWRvY3YuY29tLw==">idocv<i class="fa fa-external-link-alt"></i></span></li>
<li>通过隐式 intent 调用手机中的文档处理相关的 app</li>
<li>更换 webview 为腾讯 X5 内核，但不支持在线预览</li>
<li>office web apps 需要 windows 服务器，已更名为 office online</li>
<li>file-online-preview 基于 springboot 实现，已改名为 kkFileView</li>
<li>openoffice/Aspose</li>
</ol>
<h2 id="自己编写"><a href="#自己编写" class="headerlink" title="自己编写"></a>自己编写</h2><p>如果要自己编写的话，在前端这块</p>
<ul>
<li>excel 可以用 sheetjs</li>
<li>word 可以用 mammoth.js</li>
<li>pdf 可以用 pdf.js</li>
</ul>
<p>最后项目采用的开源的 <strong>kkFileView</strong></p>
]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>office</tag>
        <tag>preview</tag>
      </tags>
  </entry>
</search>
